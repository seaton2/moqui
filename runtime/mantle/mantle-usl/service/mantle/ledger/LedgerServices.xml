<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="init" noun="PartyAccountingConfiguration">
        <in-parameters>
            <parameter name="sourcePartyId" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="existingPartyAcctgPreference">
                <field-map field-name="organizationPartyId"/>
            </entity-find-one>
            <if condition="existingPartyAcctgPreference">
                <return message="Party [${organizationPartyId}] already has a PartyAcctgPreference record, so not initializing accounting configuration."/>
            </if>

            <!-- create an error Journal mantle.ledger.transaction.GlJournal -->
            <set field="errorGlJournalId" value="${organizationPartyId}Error"/>
            <service-call name="create#mantle.ledger.transaction.GlJournal"
                    in-map="[organizationPartyId:organizationPartyId, glJournalId:errorGlJournalId,
                        glJournalName:('Error Journal for ' + organizationPartyId)]"/>

            <!-- copy the mantle.ledger.config.PartyAcctgPreference -->
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference">
                <field-map field-name="organizationPartyId" from="sourcePartyId"/>
            </entity-find-one>
            <if condition="!partyAcctgPreference"><return error="true" message="Could not find PartyAcctgPreference for source party [${sourcePartyId}]"/></if>
            <service-call name="create#mantle.ledger.config.PartyAcctgPreference"
                    in-map="partyAcctgPreference + [organizationPartyId:organizationPartyId, errorGlJournalId:errorGlJournalId]"/>

            <!-- copy mantle.ledger.account.GlAccountOrganization -->
            <entity-find entity-name="mantle.ledger.account.GlAccountOrganization" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.GlAccountTypeDefault -->
            <entity-find entity-name="mantle.ledger.config.GlAccountTypeDefault" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.ItemTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.ItemTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.PaymentTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.PaymentTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.PaymentMethodTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.PaymentMethodTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- copy mantle.ledger.config.FinancialAccountTypeGlAccount -->
            <entity-find entity-name="mantle.ledger.config.FinancialAccountTypeGlAccount" list="recordList">
                <econdition field-name="organizationPartyId" from="sourcePartyId"/></entity-find>
            <iterate list="recordList" entry="record"><set field="record.organizationPartyId" from="organizationPartyId"/>
                <entity-create value-field="record"/></iterate>

            <!-- TODO: AssetTypeGlAccount, CreditCardTypeGlAccount, GlAccountTypePartyDefault, ProductCategoryGlAccount, ProductGlAccount, TaxAuthorityGlAccount, VarianceReasonGlAccount -->

            <!-- setup mantle.party.time.TimePeriod for FiscalMonth, FiscalQuarter, FiscalYear -->
            <service-call name="mantle.ledger.LedgerServices.check#NextFiscalTimePeriods"
                    in-map="[organizationPartyId:organizationPartyId]"/>
        </actions>
    </service>

    <service verb="find" noun="PartyAcctgPreference">
        <description>Get the PartyAcctgPreference record for the specified organizationPartyId and if not found find
            record for ancestor organization(s).</description>
        <in-parameters><parameter name="organizationPartyId" required="true"/></in-parameters>
        <out-parameters><parameter name="partyAcctgPreference" type="org.moqui.entity.EntityValue"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference" cache="true">
                <field-map field-name="organizationPartyId"/>
            </entity-find-one>
            <if condition="!partyAcctgPreference">
                <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList" cache="true">
                    <date-filter/>
                    <econdition field-name="fromPartyId" from="organizationPartyId"/>
                    <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                    <econdition field-name="fromRoleTypeId" value="OrgInternal"/>
                    <econdition field-name="toRoleTypeId" value="OrgInternal"/>
                </entity-find>
                <if condition="partyRelationshipList">
                    <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                            in-map="[organizationPartyId:partyRelationshipList[0].toPartyId]"/>
                </if>
            </if>
        </actions>
    </service>
    <service verb="find" noun="RootGlAccountClassEnum">
        <in-parameters><parameter name="glAccountClassEnumId"/></in-parameters>
        <out-parameters><parameter name="rootGlAccountClassEnumId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue" cache="true">
                <field-map field-name="enumId" from="glAccountClassEnumId"/>
            </entity-find-one>
            <if condition="enumValue.parentEnumId">
                <service-call name="mantle.ledger.LedgerServices.find#RootGlAccountClassEnum" out-map="context"
                        in-map="[glAccountClassEnumId:enumValue.parentEnumId]"/>
                <else>
                    <set field="rootGlAccountClassEnumId" from="glAccountClassEnumId"/>
                </else>
            </if>
        </actions>
    </service>
    <service verb="expand" noun="ParentOrganizationList">
        <in-parameters><parameter name="organizationPartyId" required="true"/></in-parameters>
        <out-parameters><parameter name="orgPartyIdList" type="List"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList" cache="true">
                <date-filter/>
                <econdition field-name="fromPartyId" from="organizationPartyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/>
                <econdition field-name="fromRoleTypeId" value="OrgInternal"/>
                <econdition field-name="toRoleTypeId" value="OrgInternal"/>
            </entity-find>
            <set field="orgPartyIdList" from="[organizationPartyId]"/>
            <iterate list="partyRelationshipList" entry="partyRelationship">
                <service-call name="mantle.ledger.LedgerServices.expand#ParentOrganizationList" out-map="expandResult"
                        in-map="[organizationPartyId:partyRelationship.toPartyId]"/>
                <script>orgPartyIdList.addAll(expandResult.orgPartyIdList)</script>
            </iterate>
        </actions>
    </service>

    <!-- Accounting Transaction (AcctgTrans) Posting Services -->
    <service verb="calculate" noun="AcctgTransTrialBalance">
        <description>Add up debits and credits for an AcctgTrans and get the difference.</description>
        <in-parameters><parameter name="acctgTransId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="debitTotal" type="BigDecimal"/>
            <parameter name="creditTotal" type="BigDecimal"/>
            <parameter name="debitCreditDifference" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.ledger.transaction.AcctgTransEntry" list="acctgTransEntryList">
                <econdition field-name="acctgTransId"/>
                <order-by field-name="acctgTransEntrySeqId"/>
            </entity-find>
            <set field="debitTotal" from="0"/>
            <set field="creditTotal" from="0"/>
            <iterate entry="acctgTransEntry" list="acctgTransEntryList">
                <if condition="acctgTransEntry.debitCreditFlag == 'D'">
                    <set field="debitTotal" from="debitTotal + acctgTransEntry.amount"/>

                    <else>
                        <set field="creditTotal" from="creditTotal + acctgTransEntry.amount"/>
                    </else>
                </if>
            </iterate>

            <set field="debitCreditDifference" from="debitTotal - creditTotal"/>
        </actions>
    </service>
    <service verb="post" noun="AcctgTrans">
        <description>Posts an Accounting Transaction (AcctgTrans) after verifying it is ready for posting (with
            verify#AcctgTrans service).</description>
        <in-parameters>
            <parameter name="acctgTransId" required="true"/>
            <parameter name="verifyOnly" type="Boolean" default-value="false"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.ledger.transaction.AcctgTrans" value-field="acctgTrans" auto-field-map="true"/>

            <!-- make sure the AcctgTrans has not already been posted -->
            <if condition="acctgTrans.isPosted == 'Y'">
                <message error="true">Not posting transaction [${acctgTransId}], already posted.</message>
            </if>
            <check-errors/>

            <!-- check trial balance -->
            <service-call name="mantle.ledger.LedgerServices.calculate#AcctgTransTrialBalance" out-map="context"
                    in-map="[acctgTransId:acctgTransId]"/>
            <if condition="debitTotal != creditTotal">
                <message error="true">Not posting transaction [${acctgTransId}], credit and debit totals not equal.</message>
            </if>

            <!-- check the scheduled posting date, but only if it's set -->
            <if condition="acctgTrans.scheduledPostingDate != null &amp;&amp; ec.user.nowTimestamp.before(acctgTrans.scheduledPostingDate)">
                <message error="true">Not posting transaction [${acctgTransId}], before scheduled posting date.</message>
            </if>

            <check-errors/>

            <entity-find entity-name="mantle.ledger.transaction.AcctgTransEntry" list="acctgTransEntryList">
                <econdition field-name="acctgTransId"/>
                <order-by field-name="acctgTransEntrySeqId"/>
            </entity-find>

            <!-- get current period(s) and check if closed (also include parent organizations) -->
            <service-call name="mantle.ledger.LedgerServices.expand#ParentOrganizationList" out-map="context"
                    in-map="[organizationPartyId:acctgTrans.organizationPartyId]"/>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="timePeriodList">
                <!-- TODO: this may not work because on TimePeriod fromDate/thruDate are date values, not date-time, and for thru-date need the end of day not the default beginning of day -->
                <date-filter valid-date="acctgTrans.transactionDate"/>
                <econdition field-name="timePeriodTypeId" operator="in"
                        value="FiscalYear,FiscalQuarter,FiscalMonth,FiscalWeek,FiscalBiWeek"/>
                <econdition field-name="partyId" operator="in" from="orgPartyIdList"/>
            </entity-find>
            <if condition="!timePeriodList">
                <message error="true">Not posting transaction [${acctgTransId}], could not find time period.</message>
            </if>
            <iterate entry="timePeriod" list="timePeriodList">
                <if condition="timePeriod.isClosed == 'Y'">
                    <message error="true">Not posting transaction [${acctgTransId}], time period closed [${timePeriod.timePeriodId}, ${timePeriod.timePeriodTypeId}].</message>
                </if>
            </iterate>

            <!-- make sure the glAccountId and amount fields are set -->
            <iterate entry="acctgTransEntry" list="acctgTransEntryList">
                <if condition="!acctgTransEntry.glAccountId">
                    <message error="true">Accounting transaction [${acctgTransId}] entry [${acctgTransEntry.acctgTransEntrySeqId}] has no glAccountId.</message>
                </if>
                <if condition="acctgTransEntry.amount == null">
                    <message error="true">Accounting transaction [${acctgTransId}] entry [${acctgTransEntry.acctgTransEntrySeqId}] has no amount.</message>
                </if>
            </iterate>

            <if condition="verifyOnly">
                <if condition="!ec.message.hasError()">
                    <message>Accounting transaction [${acctgTransId}] is verified for posting.</message>
                </if>
                <return/>
            </if>

            <if condition="ec.message.hasError()">
                <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                        in-map="[organizationPartyId:acctgTrans.organizationPartyId]"/>
                <if condition="partyAcctgPreference?.errorGlJournalId">
                    <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                            in-map="[acctgTransId:acctgTransId, glJournalId:partyAcctgPreference.errorGlJournalId]"/>
                    <message>Accounting transaction [${acctgTransId}] has been saved in the Error Journal [${partyAcctgPreference.errorGlJournalId}].</message>
                    <return/>

                    <!-- if not errorGlJournalId return errors -->
                    <else><check-errors/></else>
                </if>
            </if>


            <!-- for each entry update posted balance -->
            <iterate entry="acctgTransEntry" list="acctgTransEntryList">
                <entity-find-one entity-name="mantle.ledger.account.GlAccount" value-field="glAccount" for-update="true">
                    <field-map field-name="glAccountId" from="acctgTransEntry.glAccountId"/>
                </entity-find-one>

                <entity-find-one entity-name="mantle.ledger.account.GlAccountOrganization" value-field="glAccountOrganization" for-update="true">
                    <field-map field-name="glAccountId" from="acctgTransEntry.glAccountId"/>
                    <field-map field-name="organizationPartyId" from="acctgTrans.organizationPartyId"/>
                </entity-find-one>
                <if condition="!glAccountOrganization">
                    <entity-make-value entity-name="mantle.ledger.account.GlAccountOrganization" value-field="glAccountOrganization"
                            map="[glAccountId:acctgTransEntry.glAccountId,  organizationPartyId:acctgTrans.organizationPartyId]"/>
                </if>

                <!-- Debits add to debit accounts and subtract from credit accounts. Credits add to credit accounts and subtract from debit accounts. -->
                <set field="postingAmount" from="0.0"/>
                <service-call name="mantle.ledger.LedgerServices.find#RootGlAccountClassEnum" out-map="context"
                        in-map="[glAccountClassEnumId:glAccount.glAccountClassEnumId]"/>

                <if condition="rootGlAccountClassEnumId == 'DEBIT'">
                    <set field="postingAmount" from="acctgTransEntry.debitCreditFlag == 'D' ? acctgTransEntry.amount : -acctgTransEntry.amount"/>
                </if>
                <if condition="rootGlAccountClassEnumId == 'CREDIT'">
                    <set field="postingAmount" from="acctgTransEntry.debitCreditFlag == 'D' ? -acctgTransEntry.amount : acctgTransEntry.amount"/>
                </if>

                <!-- TODO: do anything with RESOURCE or potentially other root GL account classes? -->

                <set field="glAccount.postedBalance" from="(glAccount.postedBalance ?: 0) + postingAmount"/>
                <entity-update value-field="glAccount"/>
                <set field="glAccountOrganization.postedBalance" from="(glAccountOrganization.postedBalance ?: 0) + postingAmount"/>
                <entity-create value-field="glAccountOrganization" or-update="true"/>
                
                
                <!-- create or update GlAccountHistory records -->
                <iterate list="timePeriodList" entry="timePeriod">
                    <entity-find-one entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" value-field="glAccountOrgTimePeriod" for-update="true">
                        <field-map field-name="glAccountId" from="acctgTransEntry.glAccountId"/>
                        <field-map field-name="organizationPartyId" from="acctgTrans.organizationPartyId"/>
                        <field-map field-name="timePeriodId" from="timePeriod.timePeriodId"/>
                    </entity-find-one>
                    <if condition="!glAccountOrgTimePeriod">
                        <entity-make-value entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" value-field="glAccountOrgTimePeriod"
                            map="[glAccountId:acctgTransEntry.glAccountId,  organizationPartyId:acctgTrans.organizationPartyId,
                                timePeriodId:timePeriod.timePeriodId]"/>
                    </if>

                    <if condition="acctgTransEntry.debitCreditFlag == 'D'">
                        <set field="glAccountOrgTimePeriod.postedDebits" from="(glAccountOrgTimePeriod.postedDebits ?: 0) + acctgTransEntry.amount"/>
                        <else><set field="glAccountOrgTimePeriod.postedCredits" from="(glAccountOrgTimePeriod.postedCredits ?: 0) + acctgTransEntry.amount"/></else>
                    </if>
                    <entity-create value-field="glAccountOrgTimePeriod" or-update="true"/>
                </iterate>
            </iterate>

            <check-errors/>

            <!-- do the actual posting: set isPosted to Y and postedDate to now on AcctgTrans -->
            <service-call name="update#mantle.ledger.transaction.AcctgTrans"
                    in-map="[acctgTransId:acctgTransId, isPosted:'Y', postedDate:ec.user.nowTimestamp]"/>
        </actions>
    </service>

    <!-- Financial TimePeriod services -->
    <service verb="check" noun="NextFiscalTimePeriods">
        <description>
            Ensure that at least current and next TimePeriods exist for FiscalMonth, FiscalQuarter (3 months), FiscalYear.
            If no time periods exist creates fiscal time periods based on calendar (ie fiscal year matches calendar year).
            If time periods do exist but not next time periods, adds next time period starting next day after current.
            This should be run once per month to ensure the next time period exists.
        </description>
        <in-parameters>
            <parameter name="organizationPartyId"/>
            <parameter name="basisDate" type="java.sql.Date" default-value="${new java.sql.Date(ec.user.nowTimestamp.time)}"/>
        </in-parameters>
        <actions>
            <!--     <mantle.party.time.TimePeriod  timePeriodId="BIZI_2013_09" parentPeriodId="BIZI_2013_Q3" timePeriodTypeId="FiscalMonth"
            partyId="ORG_BIZI_CORP" periodNum="8" periodName="Biziwork Consulting 2013-09"
            fromDate="2013-09-01" thruDate="2013-09-30" isClosed="N"/> -->
            <script>basisCal = ec.user.getCalendarSafe(); basisCal.setTime(basisDate)</script>
            <entity-find-one entity-name="mantle.party.Organization" value-field="organization">
                <field-map field-name="partyId" from="organizationPartyId"/></entity-find-one>

            <!-- start with FiscalYear and go down so we have parentPeriodId -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="currentYearList"><date-filter valid-date="new Timestamp(basisDate.time)"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalYear"/></entity-find>
            <if condition="!currentYearList">
                <!-- no current year... assume fiscal year is calendar year and create one automatically -->
                <script>yearFromCal = basisCal.clone(); yearFromCal.set(Calendar.DAY_OF_YEAR, 1)</script>
                <script>yearThruCal = basisCal.clone(); yearThruCal.set(Calendar.DAY_OF_YEAR, yearThruCal.getActualMaximum(Calendar.DAY_OF_YEAR))</script>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[timePeriodTypeId:'FiscalYear', partyId:organizationPartyId,
                            periodNum:yearFromCal.get(Calendar.YEAR), periodName:(organization.organizationName + ' ' + yearFromCal.get(Calendar.YEAR)),
                            fromDate:new java.sql.Date(yearFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(yearThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="yearPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>yearFromCal = ec.user.getCalendarSafe(); yearFromCal.setTime(currentYearList[0].fromDate)</script>
                    <script>yearThruCal = ec.user.getCalendarSafe(); yearThruCal.setTime(currentYearList[0].thruDate)</script>
                    <set field="yearPeriodId" from="currentYearList[0].timePeriodId"/>
                </else>
            </if>

            <!-- current quarter -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="currentQuarterList"><date-filter valid-date="new Timestamp(basisDate.time)"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalQuarter"/></entity-find>
            <if condition="!currentQuarterList">
                <!-- no current quarter... assume fiscal year is calendar year with 4 3-month quarters and create one automatically -->
                <script>quarterNumber = (int) (basisCal.get(Calendar.MONTH)/3)</script>
                <script>quarterFromCal = basisCal.clone(); quarterFromCal.set(Calendar.MONTH, (quarterNumber * 3)); quarterFromCal.set(Calendar.DAY_OF_MONTH, 1)</script>
                <script>quarterThruCal = basisCal.clone(); quarterThruCal.set(Calendar.MONTH, ((quarterNumber + 1) * 3)); quarterThruCal.set(Calendar.DAY_OF_MONTH, 1); quarterThruCal.add(Calendar.DAY_OF_YEAR, -1)</script>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:yearPeriodId, timePeriodTypeId:'FiscalQuarter', partyId:organizationPartyId,
                            periodNum:(quarterNumber + 1), periodName:(organization.organizationName + ' ' + quarterFromCal.get(Calendar.YEAR) + 'Q' + (quarterNumber + 1)),
                            fromDate:new java.sql.Date(quarterFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(quarterThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="quarterPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>quarterFromCal = ec.user.getCalendarSafe(); quarterFromCal.setTime(currentQuarterList[0].fromDate)</script>
                    <script>quarterThruCal = ec.user.getCalendarSafe(); quarterThruCal.setTime(currentQuarterList[0].thruDate)</script>
                    <set field="quarterPeriodId" from="currentQuarterList[0].timePeriodId"/>
                </else>
            </if>

            <!-- current month -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="currentMonthList"><date-filter valid-date="new Timestamp(basisDate.time)"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalMonth"/></entity-find>
            <if condition="!currentMonthList">
                <!-- no current quarter... assume fiscal year is calendar year with 4 3-month quarters and create one automatically -->
                <script>monthNumber = basisCal.get(Calendar.MONTH)</script>
                <script>monthFromCal = basisCal.clone(); monthFromCal.set(Calendar.DAY_OF_MONTH, 1)</script>
                <script>monthThruCal = basisCal.clone(); monthThruCal.set(Calendar.DAY_OF_MONTH, yearThruCal.getActualMaximum(Calendar.DAY_OF_MONTH))</script>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:quarterPeriodId, timePeriodTypeId:'FiscalMonth', partyId:organizationPartyId,
                            periodNum:monthNumber+1, periodName:(organization.organizationName + ' ' + monthFromCal.get(Calendar.YEAR) + '-' + (monthNumber + 1)),
                            fromDate:new java.sql.Date(monthFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(monthThruCal.getTimeInMillis()), isClosed:'N']"/>

                <else>
                    <script>monthFromCal = ec.user.getCalendarSafe(); monthFromCal.setTime(currentMonthList[0].fromDate)</script>
                    <script>monthThruCal = ec.user.getCalendarSafe(); monthThruCal.setTime(currentMonthList[0].thruDate)</script>
                </else>
            </if>

            <!-- next year -->
            <!-- based on current year see if next exists and if not add one starting the day after and one year long -->
            <script>nextYearFromCal = yearFromCal.clone(); nextYearFromCal.add(Calendar.YEAR, 1); nextYearFromCal.getTimeInMillis()</script>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="nextYearList"><date-filter valid-date="new Timestamp(nextYearFromCal.getTimeInMillis())"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalYear"/></entity-find>
            <if condition="!nextYearList">
                <script>nextYearThruCal = yearThruCal.clone(); nextYearThruCal.add(Calendar.YEAR, 1); nextYearThruCal.add(Calendar.DAY_OF_MONTH, 5); nextYearThruCal.set(Calendar.DAY_OF_MONTH, 1); nextYearThruCal.add(Calendar.DAY_OF_MONTH, -1); nextYearThruCal.getTimeInMillis()</script>
                <set field="nextYearPeriodName" value="${organization.organizationName} ${nextYearFromCal.get(Calendar.YEAR)}"/>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[timePeriodTypeId:'FiscalYear', partyId:organizationPartyId,
                            periodNum:nextYearFromCal.get(Calendar.YEAR), periodName:nextYearPeriodName,
                            fromDate:new java.sql.Date(nextYearFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(nextYearThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="nextYearPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>nextYearFromCal = ec.user.getCalendarSafe(); nextYearFromCal.setTime(nextYearList[0].fromDate)</script>
                    <script>nextYearThruCal = ec.user.getCalendarSafe(); nextYearThruCal.setTime(nextYearList[0].thruDate)</script>
                    <set field="nextYearPeriodId" from="nextYearList[0].timePeriodId"/>
                </else>
            </if>

            <!-- next quarter, may be in current or next year -->
            <script>nextQuarterFromCal = quarterFromCal.clone(); nextQuarterFromCal.add(Calendar.MONTH, 3); nextQuarterFromCal.add(Calendar.DAY_OF_MONTH, 5); nextQuarterFromCal.set(Calendar.DAY_OF_MONTH, 1); nextQuarterFromCal.getTimeInMillis()</script>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="nextQuarterList"><date-filter valid-date="new Timestamp(nextQuarterFromCal.getTimeInMillis())"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalQuarter"/></entity-find>
            <if condition="!nextQuarterList">
                <set field="parentPeriodId" from="(nextQuarterFromCal.getTimeInMillis() &lt; yearThruCal.getTimeInMillis()) ? yearPeriodId : nextYearPeriodId"/>
                <script>nextQuarterThruCal = quarterThruCal.clone(); nextQuarterThruCal.add(Calendar.MONTH, 3); nextQuarterThruCal.add(Calendar.DAY_OF_MONTH, 5); nextQuarterThruCal.set(Calendar.DAY_OF_MONTH, 1); nextQuarterThruCal.add(Calendar.DAY_OF_MONTH, -1); nextQuarterThruCal.getTimeInMillis()</script>
                <script>nextQuarterNumber = (int) (nextQuarterFromCal.get(Calendar.MONTH)/3)</script>
                <set field="nextQuarterPeriodName" value="${organization.organizationName} ${nextQuarterFromCal.get(Calendar.YEAR)}Q${nextQuarterNumber + 1}"/>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:parentPeriodId, timePeriodTypeId:'FiscalQuarter', partyId:organizationPartyId,
                            periodNum:nextQuarterNumber+1, periodName:nextQuarterPeriodName,
                            fromDate:new java.sql.Date(nextQuarterFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(nextQuarterThruCal.getTimeInMillis()), isClosed:'N']"/>
                <set field="nextQuarterPeriodId" from="createTpOut.timePeriodId"/>

                <else>
                    <script>nextQuarterFromCal = ec.user.getCalendarSafe(); nextQuarterFromCal.setTime(nextQuarterList[0].fromDate)</script>
                    <script>nextQuarterThruCal = ec.user.getCalendarSafe(); nextQuarterThruCal.setTime(nextQuarterList[0].thruDate)</script>
                    <set field="nextQuarterPeriodId" from="nextQuarterList[0].timePeriodId"/>
                </else>
            </if>

            <!-- next month, may be in current or next quarter -->
            <script>nextMonthFromCal = monthFromCal.clone(); nextMonthFromCal.add(Calendar.MONTH, 1); nextMonthFromCal.add(Calendar.DAY_OF_MONTH, 5); nextMonthFromCal.set(Calendar.DAY_OF_MONTH, 1); nextMonthFromCal.getTimeInMillis()</script>
            <entity-find entity-name="mantle.party.time.TimePeriod" list="nextMonthList"><date-filter valid-date="new Timestamp(nextMonthFromCal.getTimeInMillis())"/>
                <econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="timePeriodTypeId" value="FiscalMonth"/></entity-find>
            <if condition="!nextMonthList">
                <set field="parentPeriodId" from="(nextMonthFromCal.getTimeInMillis() &lt; quarterThruCal.getTimeInMillis()) ? quarterPeriodId : nextQuarterPeriodId"/>
                <script>nextMonthNumber = nextMonthFromCal.get(Calendar.MONTH)</script>
                <script>nextMonthThruCal = monthThruCal.clone(); nextMonthThruCal.add(Calendar.MONTH, 1); nextMonthThruCal.add(Calendar.DAY_OF_MONTH, 5); nextMonthThruCal.set(Calendar.DAY_OF_MONTH, 1); nextMonthThruCal.add(Calendar.DAY_OF_MONTH, -1); nextMonthThruCal.getTimeInMillis()</script>
                <set field="nextMonthPeriodName" value="${organization.organizationName} ${nextMonthFromCal.get(Calendar.YEAR)}-${nextMonthNumber + 1}"/>
                <service-call name="create#mantle.party.time.TimePeriod" out-map="createTpOut"
                        in-map="[parentPeriodId:parentPeriodId, timePeriodTypeId:'FiscalMonth', partyId:organizationPartyId,
                            periodNum:nextMonthNumber+1, periodName:nextMonthPeriodName,
                            fromDate:new java.sql.Date(nextMonthFromCal.getTimeInMillis()),
                            thruDate:new java.sql.Date(nextMonthThruCal.getTimeInMillis()), isClosed:'N']"/>

                <else>
                    <script>nextMonthFromCal = ec.user.getCalendarSafe(); nextMonthFromCal.setTime(nextMonthList[0].fromDate)</script>
                    <script>nextMonthThruCal = ec.user.getCalendarSafe(); nextQuarterThruCal.setTime(nextQuarterList[0].thruDate)</script>
                </else>
            </if>
        </actions>
    </service>
    <service verb="close" noun="FinancialTimePeriod">
        <in-parameters><parameter name="timePeriodId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod" for-update="true"/>

            <!-- if any child periods make sure they are closed -->
            <entity-find entity-name="mantle.party.time.TimePeriod" list="childTimePeriodList">
                <econdition field-name="parentPeriodId" from="timePeriodId"/>
            </entity-find>
            <iterate list="childTimePeriodList" entry="childTimePeriod">
                <if condition="childTimePeriod.isClosed != 'Y'">
                    <message error="true">Not closing period ${timePeriod.periodName} [${timePeriodId}], child period ${childTimePeriod.periodName} [${childTimePeriod.timePeriodId}] not closed.</message>
                </if>
            </iterate>
            <check-errors/>

            <!-- first close the TimePeriod to avoid further postings -->
            <set field="timePeriod.isClosed" value="Y"/>
            <entity-update value-field="timePeriod"/>

            <!-- TODO: data cleanup including recaclc postedBalance on this and next TimePeriod and GlAccountOrgTimePeriod -->
            <!-- TODO: check total debits and credits for all accounts, post adjusting entries (only if configured to do so?) -->
        </actions>
    </service>

    <!-- GL Journal Posting Services -->
    <service verb="calculate" noun="GlJournalTrialBalance">
        <in-parameters><parameter name="glJournalId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="debitTotal" type="BigDecimal"/>
            <parameter name="creditTotal" type="BigDecimal"/>
            <parameter name="debitCreditDifference" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="post" noun="GlJournal">
        <description>Posts a GL Journal (GlJournal) by posting each transaction (AcctgTrans) in the journal.</description>
        <in-parameters><parameter name="glJournalId" required="true"/></in-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
</services>
