<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="get" noun="InvoiceTotal">
        <in-parameters><parameter name="invoiceId"/></in-parameters>
        <out-parameters>
            <parameter name="invoiceTotal" type="BigDecimal"/>
            <parameter name="appliedPaymentsTotal" type="BigDecimal"/>
            <parameter name="unpaidTotal" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/>
            </entity-find>
            <set field="invoiceTotal" from="0"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="invoiceTotal" from="invoiceTotal + (invoiceItem.quantity * invoiceItem.amount)"/>
            </iterate>

            <entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList">
                <econdition field-name="invoiceId"/>
            </entity-find>
            <set field="appliedPaymentsTotal" from="0"/>
            <iterate list="paymentApplicationList" entry="paymentApplication">
                <set field="appliedPaymentsTotal" from="appliedPaymentsTotal + paymentApplication.amountApplied"/>
            </iterate>

            <set field="unpaidTotal" from="invoiceTotal - appliedPaymentsTotal"/>
        </actions>
    </service>
    <service verb="get" noun="InvoicePrintInfo">
        <in-parameters><parameter name="invoiceId"/></in-parameters>
        <out-parameters>
            <parameter name="invoice" type="org.moqui.entity.EntityValue"/>
            <parameter name="currentStatus" type="org.moqui.entity.EntityValue"/>
            <parameter name="invoiceTotal" type="BigDecimal"/>
            <parameter name="appliedPaymentsTotal" type="BigDecimal"/>
            <parameter name="unpaidTotal" type="BigDecimal"/>

            <parameter name="invoiceItemList" type="List"><parameter name="entry" type="org.moqui.entity.EntityValue"/></parameter>
            <parameter name="itemTypeSummaryMapList" type="List"/>

            <parameter name="fromParty" type="org.moqui.entity.EntityValue"/>
            <parameter name="fromContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
            <parameter name="toParty" type="org.moqui.entity.EntityValue"/>
            <parameter name="toContactInfo" type="Map"><description>From the mantle.party.ContactServices.get#PartyContactInfo service.</description></parameter>
            <parameter name="toBillingRep" type="org.moqui.entity.EntityValue"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/>
            <entity-find-one entity-name="moqui.basic.StatusItem" value-field="currentStatus">
                <field-map field-name="statusId" from="invoice?.statusId"/>
            </entity-find-one>
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="context"/>
            <entity-find-related-one value-field="invoice" relationship-name="mantle.account.invoice.SettlementTerm" to-value-field="settlementTerm"/>

            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="invoiceItemList">
                <econdition field-name="invoiceId"/>
            </entity-find>

            <!-- build itemTypeSummaryMapMap with itemTypeEnumId, amount (only for ItemTimeEntry), quantity, total -->
            <set field="itemTypeSummaryMapMap" from="[:]"/>
            <iterate list="invoiceItemList" entry="invoiceItem">
                <set field="mapKey" from="invoiceItem.itemTypeEnumId"/>
                <if condition="invoiceItem.itemTypeEnumId == 'ItemTimeEntry'"><set field="mapKey" from="mapKey + '::' + invoiceItem.amount"/></if>
                <set field="itemTypeSummaryMap" from="itemTypeSummaryMapMap.get(mapKey)"/>
                <if condition="!itemTypeSummaryMap">
                    <set field="itemTypeSummaryMap" from="[itemTypeEnumId:invoiceItem.itemTypeEnumId, quantity:0, total:0]"/>
                    <if condition="invoiceItem.itemTypeEnumId == 'ItemTimeEntry'"><set field="itemTypeSummaryMap.amount" from="invoiceItem.amount"/></if>
                    <script>itemTypeSummaryMapMap.put(mapKey, itemTypeSummaryMap)</script>
                </if>
                <set field="itemTypeSummaryMap.quantity" from="itemTypeSummaryMap.quantity + (invoiceItem.quantity?:1)"/>
                <set field="itemTypeSummaryMap.total" from="itemTypeSummaryMap.total + ((invoiceItem.quantity?:1) * invoiceItem.amount)"/>
            </iterate>
            <set field="itemTypeSummaryMapList" from="itemTypeSummaryMapMap.values()"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromParty">
                <field-map field-name="partyId" from="invoice.fromPartyId"/>
            </entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="fromContactInfo"
                    in-map="[partyId:invoice.fromPartyId, postalContactMechPurposeId:'PostalPayment',
                        telecomContactMechPurposeId:'PhonePayment', emailContactMechPurposeId:'EmailPayment']"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toParty">
                <field-map field-name="partyId" from="invoice.toPartyId"/>
            </entity-find-one>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="toContactInfo"
                    in-map="[partyId:invoice.toPartyId, postalContactMechPurposeId:'PostalBilling',
                        telecomContactMechPurposeId:'PhoneBilling', emailContactMechPurposeId:'EmailBilling']"/>
            <entity-find entity-name="mantle.party.PartyRelationship" list="toBillingRelList">
                <date-filter/>
                <econdition field-name="toPartyId" from="invoice.toPartyId"/>
                <econdition field-name="relationshipTypeEnumId" value="PrtRepresentative"/>
                <econdition field-name="fromRoleTypeId" value="ClientBilling"/>
            </entity-find>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="toBillingRep">
                <field-map field-name="partyId" from="toBillingRelList?.getAt(0)?.fromPartyId"/>
            </entity-find-one>
        </actions>
    </service>

    <!-- Invoice based on Order -->
    <service verb="create" noun="EntireOrderInvoice">
        <in-parameters><parameter name="orderId" required="true"/></in-parameters>
        <out-parameters><parameter name="invoiceId"/></out-parameters>
        <actions>
            <!-- TODO: implement this... create invoice -->
            <!-- TODO: exclude OrderItem quantities that are already invoiced (OrderItemBilling) -->
        </actions>
    </service>

    <!-- Invoices based on Shipment -->
    <service verb="create" noun="SalesShipmentInvoices">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="invoiceIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: implement this... create invoices -->
            <!-- TODO: exclude OrderItem shipped quantities that are already invoiced (OrderItemBilling) -->
        </actions>
    </service>
    <service verb="create" noun="SalesReturnShipmentInvoices">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="invoiceIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: implement this... create invoices -->
            <!-- TODO: exclude OrderItem received quantities that are already invoiced (OrderItemBilling) -->
        </actions>
    </service>
    <service verb="create" noun="PurchaseShipmentInvoices">
        <in-parameters><parameter name="shipmentId" required="true"/></in-parameters>
        <out-parameters><parameter name="invoiceIdList" type="List"/></out-parameters>
        <actions>
            <!-- TODO: implement this... create invoices -->
            <!-- TODO: exclude OrderItems received that are already invoiced -->
        </actions>
    </service>

    <service verb="create" noun="ProjectExpenseInvoice">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.invoice.Invoice" include="nonpk"/>
            <parameter name="workEffortId"/>
            <parameter name="fromPartyId" required="true"/>
            <parameter name="toPartyId"/>
            <parameter name="invoiceTypeEnumId" default-value="InvoiceSales"/>
            <parameter name="statusId" default-value="InvoiceIncoming"/>
            <parameter name="invoiceDate" type="Timestamp" default-value="${ec.user.nowTimestamp}"/>
            <parameter name="currencyUomId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
        </out-parameters>
        <actions>
            <if condition="!workEffortId &amp;&amp; !toPartyId">
                <return error="true" message="Must specify either Project (workEffortId) or To Party (toPartyId)"/>
            </if>

            <if condition="!currencyUomId">
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference">
                    <field-map field-name="organizationPartyId" from="toPartyId"/>
                </entity-find-one>
                <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId ?: 'USD'"/>
            </if>
            <if condition="!toPartyId">
                <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="vendorWepList">
                    <date-filter/><econdition field-name="workEffortId"/>
                    <econdition field-name="roleTypeId" value="VendorBillFrom"/>
                </entity-find>
                <set field="vendorWep" from="vendorWepList?.getAt(0)"/>
                <set field="toPartyId" from="vendorWep.partyId"/>
            </if>

            <service-call name="create#mantle.account.invoice.Invoice" in-map="context" out-map="context"/>

            <if condition="workEffortId">
                <service-call name="create#mantle.work.effort.WorkEffortInvoice" in-map="context" out-map="context"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProjectInvoiceItems">
        <in-parameters>
            <parameter name="invoiceId"><description>If specified add item(s) to this Invoice. If empty an Invoice will be created.</description></parameter>
            <parameter name="workEffortId" required="true"/>
            <parameter name="thruDate" type="Timestamp" default-value="${ec.user.nowTimestamp}">
                <description>Only TimeEntry records before this date will be included. Defaults to now.</description></parameter>
            <parameter name="currencyUomId"/>
            <parameter name="ratePurposeEnumId" default-value="RaprClient"/>
            <parameter name="workerPartyId"><description>If specified only include time entries and expenses from this Party.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>
            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="billToList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" value="CustomerBillTo"/>
            </entity-find>
            <set field="billToWep" from="billToList ? billToList[0] : null"/>
            <entity-find entity-name="mantle.work.effort.WorkEffortParty" list="billFromList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="roleTypeId" value="VendorBillFrom"/>
            </entity-find>
            <set field="billFromWep" from="billFromList ? billFromList[0] : null"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="workerParty">
                <field-map field-name="partyId" from="workerPartyId"/>
            </entity-find-one>

            <!-- create Invoice associated with WorkEffort, use WorkEffortParty to find from/to parties -->
            <if condition="!invoiceId">
                <if condition="!currencyUomId">
                    <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="partyAcctgPreference">
                        <field-map field-name="organizationPartyId" from="ratePurposeEnumId == 'RaprClient' ? billToWep?.partyId : billFromWep?.partyId"/>
                    </entity-find-one>
                    <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId ?: 'USD'"/>
                </if>
                <set field="description" value="Invoice for ${workEffort ? 'project' + workEffort.workEffortName + ' [' + workEffortId + ']' : ''} ${workerParty ? 'worker' + workerParty.firstName?:'' + ' ' + workerParty.lastName?:'' + workerParty.organizationName?:'' + ' [' + workerPartyId + ']' : ''}"/>
                <if condition="ratePurposeEnumId == 'RaprClient'">
                    <service-call name="create#mantle.account.invoice.Invoice" out-map="context"
                            in-map="[invoiceTypeEnumId:'InvoiceSales', statusId:'InvoiceInProcess',
                                fromPartyId:billFromWep?.partyId, toPartyId:billToWep?.partyId,
                                invoiceDate:ec.user.nowTimestamp, currencyUomId:currencyUomId, description:description]"/>

                    <else>
                        <service-call name="create#mantle.account.invoice.Invoice" out-map="context"
                                in-map="[invoiceTypeEnumId:'InvoiceSales', statusId:'InvoiceIncoming',
                                    fromPartyId:workerPartyId, toPartyId:billFromWep?.partyId,
                                    invoiceDate:ec.user.nowTimestamp, currencyUomId:currencyUomId, description:description]"/>
                    </else>
                </if>
            </if>

            <!-- iterate through task WorkEffort records and add to Invoice with create#TimeEntryInvoiceItems service -->
            <!-- TODO: consider refactoring to query TimeEntry records by project workEffortId and workerPartyId
                instead of doing a query for each task (was original approach when before workerPartyId support and
                making project workEffortId optional -->
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskWorkEffortList">
                <econdition field-name="rootWorkEffortId" from="workEffortId" ignore-if-empty="true"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
            </entity-find>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>
            <iterate list="taskWorkEffortList" entry="taskWorkEffort">
                <service-call name="mantle.account.InvoiceServices.create#TimeEntryInvoiceItems" out-map="createResult"
                        in-map="[invoiceId:invoiceId, workEffortId:taskWorkEffort.workEffortId, thruDate:thruDate,
                        currencyUomId:currencyUomId, ratePurposeEnumId:ratePurposeEnumId, workerPartyId:workerPartyId]"/>
                <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + createResult.invoiceItemCreatedCount"/>
            </iterate>

            <!-- add items for all expense invoice items for project that are not yet billed through -->
            <if condition="ratePurposeEnumId == 'RaprClient'">
                <entity-find entity-name="mantle.work.effort.WorkEffortInvoiceDetail" list="weidList">
                    <econdition field-name="workEffortId" ignore-if-empty="true"/>
                    <econdition field-name="statusId" value="InvoicePmtSent"/>
                    <econdition field-name="invoiceDate" operator="less-equals" from="thruDate"/>
                    <!-- don't include invoices to project CustomerBillTo partyId -->
                    <econdition field-name="toPartyId" operator="not-equals" from="billToWep.partyId"/>
                    <!-- don't include invoices from project VendorBillFrom partyId -->
                    <econdition field-name="fromPartyId" operator="not-equals" from="billFromWep.partyId"/>
                    <!-- filter by workerPartyId if specified, will be the fromPartyId on an expense invoice -->
                    <econdition field-name="fromPartyId" from="workerPartyId" ignore-if-empty="true"/>
                    <order-by field-name="-invoiceDate"/>
                </entity-find>
                <iterate list="weidList" entry="weid">
                    <!-- create invoice items and InvoiceItemAssocs, set invoice statusId -->
                    <service-call name="mantle.account.InvoiceServices.create#InvoiceBillThroughItems"
                            in-map="[originalInvoiceId:weid.invoiceId, newInvoiceId:invoiceId]" out-map="createResult"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + createResult.invoiceItemCreatedCount"/>
                    <service-call name="update#mantle.account.invoice.Invoice"
                            in-map="[invoiceId:weid.invoiceId, statusId:'InvoiceBilledThrough']"/>
                </iterate>
            </if>

            <if condition="invoiceItemCreatedCount == 0">
                <message error="true">No time entries or expenses found for Project [${workEffortId}], not creating invoice or adding items to existing invoice.</message>

                <else>
                    <message>Added ${invoiceItemCreatedCount} items to Invoice ${invoiceId}</message>
                </else>
            </if>
        </actions>
    </service>

    <!-- InvoiceItems based on TimeEntry -->
    <service verb="create" noun="TimeEntryInvoiceItems">
        <in-parameters>
            <parameter name="invoiceId" required="true"/>
            <parameter name="workEffortId"><description>If specified get TimeEntry records constrained on it. Generally a task ID.</description></parameter>
            <parameter name="timesheetId"><description>If specified get TimeEntry records constrained on it.</description></parameter>
            <parameter name="thruDate" type="Timestamp" default-value="${ec.user.nowTimestamp}">
                <description>Only TimeEntry records before this date will be included. Defaults to now.</description></parameter>
            <parameter name="createSingleItem" type="Boolean" default-value="false"/>
            <parameter name="currencyUomId" default-value="USD"/>
            <parameter name="ratePurposeEnumId" default-value="RaprClient"/>
            <parameter name="workerPartyId"><description>If specified only include time entries from this Party.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>

            <if condition="ratePurposeEnumId == 'RaprVendor'">
                <set field="timeEntryInvoiceCondition" from="[vendorInvoiceId:null]"/>
                <else><set field="timeEntryInvoiceCondition" from="[invoiceId:null]"/></else>
            </if>
            <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                <econdition-object field="timeEntryInvoiceCondition"/>
                <econdition field-name="workEffortId" ignore-if-empty="true"/>
                <econdition field-name="timesheetId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="thruDate" operator="less-equals" from="thruDate"/>
                    <econdition field-name="thruDate" from="null"/>
                </econditions>
                <!-- filter by workerPartyId if specified -->
                <econdition field-name="partyId" from="workerPartyId" ignore-if-empty="true"/>
            </entity-find>

            <set field="itemTypeEnumId" from="ratePurposeEnumId == 'RaprVendor' ? 'ItemExpServLabor' : 'ItemTimeEntry'"/>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>
            <if condition="createSingleItem">
                <set field="amountTotal" from="0"/>
                <iterate list="timeEntryList" entry="timeEntry">
                    <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/>

                    <if condition="rateAmountId">
                        <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                            <field-map field-name="rateAmountId"/>
                        </entity-find-one>

                        <else>
                            <service-call name="mantle.work.TimeServices.get#TimeEntryRate" out-map="getTerOut"
                                    in-map="[timeEntryId:timeEntry.timeEntryId]"/>
                            <!-- set the values in the timeEntry record for use below since the service updates the DB record and we don't want to re-query to get it -->
                            <set field="timeEntry.rateAmountId" from="getTerOut.rateAmountId"/>
                            <set field="timeEntry.vendorRateAmountId" from="getTerOut.vendorRateAmountId"/>

                            <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? getTerOut.vendorRateAmountId : getTerOut.rateAmountId"/>
                            <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                                <field-map field-name="rateAmountId"/>
                            </entity-find-one>
                        </else>
                    </if>
                    <if condition="rateAmount"><set field="amountTotal" from="amountTotal + (timeEntry.hours*rateAmount.rateAmount)"/></if>
                </iterate>
                <if condition="amountTotal">
                    <set field="description" value="Time entries for task ${workEffort.workEffortName} [${workEffortId}]"/>
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,
                                amount:amountTotal, quantity:1, description:description]"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>

                    <iterate list="timeEntryList" entry="timeEntry">
                        <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/>
                        <if condition="rateAmountId">
                            <if condition="ratePurposeEnumId == 'RaprVendor'">
                                <set field="timeEntry.vendorInvoiceId" from="invoiceId"/>
                                <set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>

                                <else>
                                    <set field="timeEntry.invoiceId" from="invoiceId"/>
                                    <set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                </else>
                            </if>
                            <entity-update value-field="timeEntry"/>
                        </if>
                    </iterate>
                </if>


                <else>
                    <iterate list="timeEntryList" entry="timeEntry">
                        <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/>

                        <if condition="rateAmountId">
                            <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                                <field-map field-name="rateAmountId"/>
                            </entity-find-one>

                            <else>
                                <service-call name="mantle.work.TimeServices.get#TimeEntryRate" out-map="getTerOut"
                                        in-map="[timeEntryId:timeEntry.timeEntryId]"/>
                                <set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? getTerOut.vendorRateAmountId : getTerOut.rateAmountId"/>
                                <entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="rateAmount" cache="true">
                                    <field-map field-name="rateAmountId"/>
                                </entity-find-one>
                            </else>
                        </if>

                        <if condition="rateAmount">
                            <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                                    in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,
                                        amount:rateAmount.rateAmount, quantity:timeEntry.hours, description:timeEntry.comments,
                                        itemDate:timeEntry.fromDate]"/>
                            <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>

                            <if condition="ratePurposeEnumId == 'RaprVendor'">
                                <set field="timeEntry.vendorInvoiceId" from="invoiceId"/>
                                <set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>

                                <else>
                                    <set field="timeEntry.invoiceId" from="invoiceId"/>
                                    <set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/>
                                </else>
                            </if>
                            <entity-update value-field="timeEntry"/>
                        </if>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="InvoiceBillThroughItems">
        <in-parameters>
            <parameter name="originalInvoiceId" required="true"/>
            <parameter name="newInvoiceId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceItemCreatedCount" type="Long"/>
        </out-parameters>
        <actions>
            <set field="invoiceItemCreatedCount" from="0" type="Long"/>

            <entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="originalInvoice">
                <field-map field-name="invoiceId" from="originalInvoiceId"/>
            </entity-find-one>
            <entity-find entity-name="mantle.account.invoice.InvoiceItem" list="originalInvoiceItemList">
                <econdition field-name="invoiceId" from="originalInvoiceId"/>
            </entity-find>
            <iterate list="originalInvoiceItemList" entry="originalInvoiceItem">
                <!-- if there is a TimeEntry with this as a vendor InvoiceItem skip it so it isn't double billed (and at the incorrect rate) -->
                <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList">
                    <econdition field-name="vendorInvoiceId" from="originalInvoiceItem.invoiceId"/>
                    <econdition field-name="vendorInvoiceItemSeqId" from="originalInvoiceItem.invoiceItemSeqId"/>
                </entity-find>
                <if condition="!timeEntryList">
                    <!-- create new InvoiceItem -->
                    <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="iiOut"
                            in-map="[invoiceId:newInvoiceId, itemTypeEnumId:originalInvoiceItem.itemTypeEnumId,
                                amount:originalInvoiceItem.amount, quantity:originalInvoiceItem.quantity,
                                description:originalInvoiceItem.description,
                                itemDate:(originalInvoiceItem.itemDate ?: originalInvoice.invoiceDate)]"/>
                    <set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/>
                    <!-- create InvoiceItemAssoc between original and new -->
                    <service-call name="create#mantle.account.invoice.InvoiceItemAssoc"
                            in-map="[invoiceId:originalInvoiceItem.invoiceId, invoiceItemSeqId:originalInvoiceItem.invoiceItemSeqId,
                                toInvoiceId:newInvoiceId, toInvoiceItemSeqId:iiOut.invoiceItemSeqId,
                                invoiceItemAssocTypeEnumId:'IiatBillThrough', amount:originalInvoiceItem.amount,
                                quantity:originalInvoiceItem.quantity]"/>
                </if>
            </iterate>
        </actions>
    </service>
</services>
