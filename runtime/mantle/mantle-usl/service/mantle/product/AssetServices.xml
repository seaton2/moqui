<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

    <!-- STATUS: EXPERIMENTAL -->

    <service verb="update" noun="AssetFromDetail">
        <in-parameters>
            <parameter name="assetId"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="Asset" value-field="asset"/>
            <entity-find-one entity-name="AssetDetailSummary" value-field="assetDetailSummary"/>

            <set field="asset.availableToPromiseTotal" from="assetDetailSummary.availableToPromiseTotal"/>
            <set field="asset.quantityOnHandTotal" from="assetDetailSummary.quantityOnHandTotal"/>
            <entity-update value-field="asset"/>
        </actions>
    </service>

    <service verb="issue" noun="AssetReservation">
        <description>Issue an Asset based on a reservation (AssetReservation).</description>
        <in-parameters>
            <parameter name="assetReservation" type="org.moqui.entity.EntityValue" required="true"/>
            <parameter name="shipmentId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="create#AssetIssuance" out-map="context"
                    in-map="assetId:assetReservation.assetId, assetReservationId:assetReservation.assetReservationId,
                        orderId:assetReservation.orderId, orderItemSeqId:assetReservation.orderItemSeqId,
                        shipmentId:shipmentId, productId:assetReservation.productId,
                        issuedDateTime:ec.user.nowTimestamp, quantity:quantity"/>

            <!-- create AssetDetail to decrement quantityOnHand -->
            <!-- NOTE: no availableToPromiseDiff because that was modified during the reservation -->
            <service-call name="create#AssetDetail" in-map="[assetId:assetReservation.assetId,
                    effectiveDate:ec.user.nowTimestamp, quantityOnHandDiff:-quantity,
                    assetReservationId:assetReservation.assetReservationId, shipmentId:shipmentId,
                    productId:assetReservation.productId, assetIssuanceId:assetIssuanceId]"/>

            <set field="assetReservation.quantityNotIssued" from="assetReservation.quantityNotIssued - quantity"/>
            <entity-update value-field="assetReservation"/>
        </actions>
    </service>
    <service verb="issue" noun="Asset">
        <description>Issue an Asset with no reservation.</description>
        <in-parameters>
            <parameter name="assetId"/>
            <parameter name="shipmentId" required="true"/>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="OrderItem" value-field="orderItem"/>
            <set field="productId" from="orderItem.productId"/>

            <if condition="!assetId">
                <!-- TODO: improve Asset selection code, maybe use the asset reservation selection process -->
                <!-- TODO: limit to Facility for ProductStore -->
                <!-- TODO: spread across multiple Asset records if necessary to satisfy the quantity -->
                <entity-find entity-name="Asset" list="assetList">
                    <econdition field-name="productId"/>
                    <!-- get the one with the most inventory available, for now -->
                    <order-by field-name="-availableToPromiseTotal"/>
                </entity-find>
                <set field="assetId" from="assetList?.getAt(0)?.assetId"/>
            </if>

            <if condition="!assetId">
                <!-- no asset... create a shell one to record the issuance and detail against -->
                <!-- TODO: set facilityId, ownerPartyId -->
                <service-call name="create#Asset" out-map="context"
                        in-map="[assetTypeEnumId:'INVENTORY', hasQuantity:'Y', statusId:'AST_AVAILABLE',
                            productId:productId, dateReceived:ec.user.nowTimestamp,
                            availableToPromiseTotal:0, quantityOnHandTotal: 0]"/>
            </if>
            <entity-find-one entity-name="Asset" value-field="asset"/>

            <service-call name="create#AssetIssuance" out-map="context"
                    in-map="assetId:assetId, orderId:orderId, orderItemSeqId:orderItemSeqId, shipmentId:shipmentId,
                        productId:productId, issuedDateTime:ec.user.nowTimestamp, quantity:quantity"/>
            <!-- create AssetDetail to decrement quantityOnHand -->
            <service-call name="create#AssetDetail" in-map="[assetId:assetId,
                    effectiveDate:ec.user.nowTimestamp, quantityOnHandDiff:-quantity, availableToPromiseDiff:-quantity,
                    shipmentId:shipmentId, productId:productId, assetIssuanceId:assetIssuanceId]"/>
        </actions>
    </service>
</services>
