<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

    <!-- STATUS: EXPERIMENTAL -->

    <service verb="ship" noun="OrderPart">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.shipment.ShipmentServices.create#OrderPartShipment" out-map="context"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId]"/>

            <!-- pack all items (creating ShipmentPackageContent and AssetIssuance records) -->
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentProduct"
                        in-map="[productId:orderItem.productId, quantity:orderItem.quantity, shipmentId:shipmentId,
                            shipmentPackageSeqId:shipmentPackageSeqId]"/>
            </iterate>

            <!-- set Shipment Packed -->
            <service-call name="mantle.shipment.ShipmentServices.pack#Shipment" in-map="[shipmentId:shipmentId]"/>

            <!-- on Shipment Packed mark Order as Completed -->
            <!-- TODO: separate this to more generic code, like an ECA or some such? if more generic handle partly shipped orders... -->
            <service-call name="mantle.order.OrderServices.complete#Order" in-map="[orderId:orderId]"/>

            <!-- set Shipment Shipped -->
            <service-call name="mantle.shipment.ShipmentServices.ship#Shipment" in-map="[shipmentId:shipmentId]"/>
        </actions>
    </service>

    <service verb="create" noun="OrderPartShipment">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="createPackage" type="Boolean" default-value="true"/>
            <parameter name="createRouteSegment" type="Boolean" default-value="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentPackageSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="OrderPart" value-field="orderPart"/>

            <!-- create Shipment record, get shipmentId -->
            <service-call name="create#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentTypeEnumId:'SALES_SHIPMENT', statusId:'SHIPMENT_INPUT',
                        fromPartyId:orderPart.vendorPartyId, toPartyId:orderPart.customerPartyId]"/>

            <if condition="createPackage">
                <service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="context"/>
            </if>
            <if condition="createRouteSegment">
                <service-call name="create#mantle.shipment.ShipmentRouteSegment" out-map="context"
                        in-map="[shipmentId:shipmentId, carrierPartyId:carrierPartyId,
                            shipmentMethodEnumId:shipmentMethodEnumId,
                            destPostalContactMechId:orderPart.postalContactMechId,
                            destTelecomContactMechId:orderPart.telecomContactMechId]"/>
            </if>
            <if condition="shipmentPackageSeqId &amp;&amp; shipmentRouteSegmentSeqId">
                <service-call name="create#mantle.shipment.ShipmentPackageRouteSeg"
                        in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,
                                shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/>
            </if>

            <!-- for each OrderItem in the part create ShipmentItem and ShipmentItemSource records -->
            <entity-find-related value-field="orderPart" relationship-name="OrderItem" list="orderItemList"/>
            <iterate list="orderItemList" entry="orderItem">
                <service-call name="create#mantle.shipment.ShipmentItem"
                        in-map="[shipmentId:shipmentId, productId:orderItem.productId, quantity:orderItem.quantity]"/>
                <service-call name="create#mantle.shipment.ShipmentItemSource"
                        in-map="[shipmentId:shipmentId, productId:orderItem.productId,
                            quantity:orderItem.quantity, quantityNotPacked:orderItem.quantity,
                            orderId:orderItem.orderId, orderItemSeqId:orderItem.orderItemSeqId]"/>
            </iterate>

        </actions>
    </service>

    <service verb="pack" noun="ShipmentProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="ShipmentItemSource" list="shipmentItemSourceList" cache="false">
                <econdition field-name="shipmentId"/><econdition field-name="productId"/>
                <econdition field-name="quantityNotPacked" operator="greater" from="0"/>
            </entity-find>
            <set field="quantityRemaining" from="quantity"/>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <set field="quantityToPack" from="shipmentItemSource.quantityNotPacked > quantityRemaining ?
                        quantityRemaining : shipmentItemSource.quantityNotPacked"/>
                <set field="quantityRemaining" from="quantityRemaining > shipmentItemSource.quantityNotPacked ?
                        quantityRemaining - shipmentItemSource.quantityNotPacked : 0"/>
                <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentItemSource"
                        in-map="[shipmentItemSource:shipmentItemSource, shipmentPackageSeqId:shipmentPackageSeqId,
                            quantity:quantityToPack]"/>
            </iterate>
        </actions>
    </service>
    <service verb="pack" noun="ShipmentItemSource">
        <description>This is the lowest-level packing service and operates on a single ShipmentItemSource record.</description>
        <in-parameters>
            <parameter name="shipmentItemSource" type="org.moqui.entity.EntityValue" required="true"/>
            <parameter name="shipmentPackageSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <!-- create ShipmentPackageContent or update if already exists -->
            <entity-find-one entity-name="ShipmentPackageContent" value-field="shipmentPackageContent">
                <field-map field-name="shipmentId" from="shipmentItemSource.shipmentId"/>
                <field-map field-name="productId" from="shipmentItemSource.productId"/>
                <field-map field-name="shipmentPackageSeqId"/>
            </entity-find-one>
            <if condition="shipmentPackageContent">
                <set field="shipmentPackageContent.quantity" from="shipmentPackageContent.quantity + quantity"/>
                <entity-update value-field="shipmentPackageContent"/>

                <else>
                    <service-call name="create#mantle.shipment.ShipmentPackageContent"
                            in-map="[shipmentId:shipmentItemSource.shipmentId, productId:shipmentItemSource.productId,
                                shipmentPackageSeqId:shipmentPackageSeqId, quantity:quantity]"/>
                </else>
            </if>

            <!-- create AssetIssuance records based on AssetReservation records -->
            <entity-find entity-name="AssetReservation" list="assetReservationList">
                <econdition field-name="orderId" from="shipmentItemSource.orderId"/>
                <econdition field-name="orderItemSeqId" from="shipmentItemSource.orderItemSeqId"/>
                <econdition field-name="quantityNotIssued" operator="greater" from="0"/>
            </entity-find>
            <if condition="assetReservationList">
                <!-- issue based on reservations -->
                <set field="quantityRemaining" from="quantity"/>
                <iterate list="assetReservationList" entry="assetReservation">
                    <set field="quantityToIssue" from="assetReservation.quantityNotIssued > quantityRemaining ?
                        quantityRemaining : assetReservation.quantityNotIssued"/>
                    <set field="quantityRemaining" from="quantityRemaining > assetReservation.quantityNotIssued ?
                        quantityRemaining - assetReservation.quantityNotIssued : 0"/>
                    <service-call name="mantle.product.AssetServices.issue#AssetReservation"
                            in-map="[assetReservation:assetReservation, shipmentId:shipmentItemSource.shipmentId,
                                quantity:quantityToIssue]"/>
                </iterate>

                <else>
                    <!-- do a non-reservation asset issuance -->
                    <service-call name="mantle.product.AssetServices.issue#Asset"
                            in-map="[shipmentId:shipmentItemSource.shipmentId, quantity:quantity,
                                orderId:shipmentItemSource.orderId, orderItemSeqId:shipmentItemSource.orderItemSeqId]"/>
                </else>
            </if>

            <!-- update quantityNotPacked to get ready for the next pack call -->
            <set field="shipmentItemSource.quantityNotPacked" from="shipmentItemSource.quantityNotPacked - quantity"/>
            <if condition="shipmentItemSource.quantityNotPacked &lt;= 0">
                <set field="shipmentItemSource.statusId" value="PICKITEM_PACKED"/>
            </if>
            <entity-update value-field="shipmentItemSource"/>
        </actions>
    </service>

    <service verb="pack" noun="Shipment">
        <in-parameters><parameter name="shipmentId"/></in-parameters>
        <out-parameters><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <set field="statusChanged" from="shipment.statusId != 'SHIPMENT_PACKED'"/>
            <set field="shipment.statusId" value="SHIPMENT_PACKED"/>
            <entity-update value-field="shipment"/>
        </actions>
    </service>
    <service verb="ship" noun="Shipment">
        <in-parameters><parameter name="shipmentId"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <set field="shipment.statusId" value="SHIPMENT_SHIPPED"/>
            <entity-update value-field="shipment"/>
        </actions>
    </service>
</services>
