<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

    <!-- STATUS: EXPERIMENTAL -->

    <service verb="create" noun="Task">
        <in-parameters>
            <parameter name="rootWorkEffortId" required="true"><description>The ID of the Project</description></parameter>
            <parameter name="parentWorkEffortId"/>
            <parameter name="milestoneWorkEffortId"/>
            <parameter name="workEffortName" required="true"/>
            <parameter name="description"/>
            <parameter name="statusId" default-value="WeInPlanning"/>
            <parameter name="priority" default-value="5" type="Long"/>
            <parameter name="purposeEnumId" default-value="WepTask"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedWorkTime" type="BigDecimal"/>
            <parameter name="remainingWorkTime" type="BigDecimal" default-value="${estimatedWorkTime}"/>
            <parameter name="timeUomId" default-value="TF_hr"/>
            <parameter name="assignToPartyId" default-value="${ec.user.userAccount.partyId}"/>
        </in-parameters>
        <out-parameters>
            <parameter name="workEffortId"/>
        </out-parameters>
        <actions>
            <set field="seqName" value="Project_${rootWorkEffortId}"/>
            <set field="workEffortId" value="${rootWorkEffortId}-${ec.entity.sequencedIdPrimary(seqName, null, null)}"/>
            <service-call name="create#WorkEffort" out-map="context" in-map="context + [workEffortTypeEnumId:'WetTask']"/>
            <service-call name="create#WorkEffortParty" in-map="[workEffortId:workEffortId, partyId:assignToPartyId,
                        roleTypeId:'Worker', fromDate:ec.user.nowTimestamp, statusId:'PRTYASGN_ASSIGNED']"/>
        </actions>
    </service>
    <service verb="update" noun="Task">
        <in-parameters>
            <auto-parameters entity-name="WorkEffort" include="nonpk"/>
            <parameter name="workEffortId" required="true"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedWorkTime" type="BigDecimal"/>
            <parameter name="remainingWorkTime" type="BigDecimal"/>
            <parameter name="actualWorkTime" type="BigDecimal"/>
            <parameter name="timeUomId" default-value="TF_hr"/>
            <parameter name="milestoneWorkEffortId"/>
        </in-parameters>
        <actions>
            <service-call name="update#WorkEffort" out-map="context" in-map="context"/>
            <if condition="milestoneWorkEffortId">
                <service-call name="mantle.work.TaskServices.update#TaskMilestone" in-map="context"/>
            </if>
        </actions>
    </service>
    <service verb="update" noun="TaskMilestone">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="milestoneWorkEffortId" required="true"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="WorkEffortAssoc"/>
        </out-parameters>
        <actions>
            <!-- TODO: if milestoneWorkEffortId is different from currently associated milestone,
                    expire all milestones and assoc with new one -->
        </actions>
    </service>

    <service verb="add" noun="TaskTime">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="partyId" default-value="${ec.user.userAccount.partyId}"/>
            <parameter name="hours" type="BigDecimal"/>
            <parameter name="breakHours" type="BigDecimal"/>
            <parameter name="remainingWorkTime" type="BigDecimal"/>
            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="rateTypeEnumId" default-value="RT_STANDARD"/>
            <parameter name="comments"/>
        </in-parameters>
        <out-parameters>
            <parameter name="timeEntryId"/>
        </out-parameters>
        <actions>
            <!-- calculate hours using fromDate/thruDate/breakHours -->
            <if condition="!hours &amp;&amp; fromDate &amp;&amp; thruDate &amp;&amp; breakHours">
                <set field="hours" from="((thruDate.time - fromDate.time)/(60*60*1000)) - breakHours"/>
            </if>
            <!-- if empty set default from/thru dates based on hours and current time -->
            <if condition="!thruDate">
                <set field="thruDate" from="ec.l10n.parseTimestamp(ec.l10n.formatValue(ec.user.nowTimestamp, 'yyyy-MM-dd HH:mm'), 'yyyy-MM-dd HH:mm')"/>
            </if>
            <if condition="hours &amp;&amp; !fromDate">
                <set field="fromDate" from="new Timestamp((Long) (thruDate.time - (hours*60*60*1000) - (breakHours ? (breakHours*60*60*1000) : 0)))"/>
            </if>

            <service-call name="create#mantle.work.time.TimeEntry" out-map="context" in-map="context"/>
            <service-call name="mantle.work.TimeServices.get#TimeEntryRate" out-map="context" in-map="context"/>

            <if condition="remainingWorkTime != null">
                <service-call name="update#mantle.work.effort.WorkEffort"
                        in-map="[workEffortId:workEffortId, remainingWorkTime:remainingWorkTime]"/>
            </if>
        </actions>
    </service>
    <service verb="update" noun="TaskFromTime" authenticate="anonymous-all">
        <in-parameters><parameter name="workEffortId" required="true"/></in-parameters>
        <actions>
            <entity-find entity-name="mantle.work.time.TimeEntrySummary" list="timeEntrySummaryList">
                <econdition field-name="workEffortId"/>
                <select-field field-name="hours"/>
            </entity-find>
            <if condition="timeEntrySummaryList">
                <service-call name="update#mantle.work.effort.WorkEffort"
                        in-map="[workEffortId:workEffortId, actualWorkTime:timeEntrySummaryList[0].hours]"/>
            </if>
        </actions>
    </service>
    <service verb="update" noun="ProjectTimeFromTask" authenticate="anonymous-all">
        <in-parameters><parameter name="rootWorkEffortId" required="true"/></in-parameters>
        <actions>
            <entity-find entity-name="mantle.work.time.TaskTimeSummary" list="ttsList">
                <econdition field-name="rootWorkEffortId"/>
                <select-field field-name="actualWorkTime"/>
                <select-field field-name="estimatedWorkTime"/>
            </entity-find>
            <if condition="ttsList">
                <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="rootWorkEffort">
                    <field-map field-name="workEffortId" from="rootWorkEffortId"/>
                </entity-find-one>
                <set field="rootWorkEffort.actualWorkTime" from="ttsList[0].actualWorkTime"/>
                <set field="rootWorkEffort.estimatedWorkTime" from="ttsList[0].estimatedWorkTime"/>
                <entity-update value-field="rootWorkEffort"/>
            </if>
        </actions>
    </service>
</services>
