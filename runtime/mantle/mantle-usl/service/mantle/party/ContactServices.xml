<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

<!-- STATUS: EXPERIMENTAL -->

    <service verb="get" noun="PartyShippingInfo">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="postalContactMechId"/>
            <parameter name="postalAddress" type="org.moqui.entity.EntityValue"/>
            <parameter name="postalAddressStateGeo" type="org.moqui.entity.EntityValue"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="telecomNumber" type="org.moqui.entity.EntityValue"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="PartyContactMech" list="postalPcmList">
                <date-filter/>
                <econdition field-name="partyId"/>
                <econdition field-name="contactMechPurposeId" value="PostalShippingDest"/>
            </entity-find>
            <if condition="postalPcmList">
                <set field="postalContactMechId" from="postalPcmList[0].contactMechId"/>
                <entity-find-one entity-name="PostalAddress" value-field="postalAddress">
                    <field-map field-name="contactMechId" from="postalContactMechId"/>
                </entity-find-one>
            </if>
            <entity-find-related-one value-field="postalAddress" relationship-name="StateProvince#moqui.basic.Geo" to-value-field="postalAddressStateGeo"/>

            <entity-find entity-name="PartyContactMech" list="telecomPcmList">
                <date-filter/>
                <econdition field-name="partyId"/>
                <econdition field-name="contactMechPurposeId" value="PhoneShippingDest"/>
            </entity-find>
            <if condition="telecomPcmList">
                <set field="telecomContactMechId" from="telecomPcmList[0].contactMechId"/>
                <entity-find-one entity-name="TelecomNumber" value-field="telecomNumber">
                    <field-map field-name="contactMechId" from="telecomContactMechId"/>
                </entity-find-one>
            </if>
            <!-- <log level="warn" message="get#PartyShippingInfo finish context=${context.context}"/> -->
        </actions>
    </service>

    <!-- PostalAddress Services -->
    <service verb="create" noun="PostalAddress" type="inline">
        <description>
            Create a Postal Address (and the corresponding ContactMech record).
            If partyId and contactMechPurposeId are also passed will create a PartyContactMech record.
        </description>
        <in-parameters>
            <auto-parameters entity-name="PostalAddress" include="nonpk"/>

            <parameter name="partyId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="ContactMech" value-field="contactMech" map="[contactMechTypeEnumId:'CmtPostalAddress']"/>
            <entity-sequenced-id-primary value-field="contactMech"/>
            <entity-create value-field="contactMech"/>

            <entity-make-value entity-name="PostalAddress" value-field="postalAddress"/>
            <set field="postalAddress.contactMechId" from="contactMech.contactMechId"/>
            <entity-set value-field="postalAddress" include="nonpk"/>
            <entity-create value-field="postalAddress"/>

            <if condition="partyId &amp;&amp; contactMechPurposeId">
                <entity-make-value entity-name="PartyContactMech" value-field="partyContactMech"
                    map="[partyId:partyId, contactMechId:contactMech.contactMechId, contactMechPurposeId:contactMechPurposeId, fromDate:ec.user.nowTimestamp]"/>
                <entity-create value-field="partyContactMech"/>
            </if>

            <set field="result.contactMechId" from="contactMech.contactMechId"/>
        </actions>
    </service>
    <service verb="update" noun="PartyPostalAddress" type="inline">
        <description>
            Update a Postal Address for a Party. PostalAddress is immutable, so this creates a new one and associates
            it with the Party, expiring the old associations (PartyContactMech records).

            If a contactMechPurposeId is passed in it will only update for that purpose, otherwise it will update for
            all purposes.

            NOTE: if you want to update the ContactMech.paymentFraudEvidenceId or .trustLevelEnumId fields, do so
            directly on the ContactMech entity (do not use this service).
        </description>
        <in-parameters>
            <auto-parameters entity-name="PostalAddress" include="nonpk"/>

            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="PostalAddress" value-field="origPostalAddress"/>
            <script>newPostalAddress = origPostalAddress.cloneValue()</script>
            <entity-set value-field="newPostalAddress" include="nonpk"/>
            <if condition="newPostalAddress == origPostalAddress">
                <log level="info" message="No fields were different for Postal Address with ID [${contactMechId}], not updating."/>
                <return error="false"/>
            </if>

            <entity-find entity-name="PartyContactMech" list="origPcmList">
                <date-filter/>
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechId" from="contactMechId"/>
                <econdition field-name="contactMechPurposeId" from="contactMechPurposeId" ignore-if-empty="true"/>
            </entity-find>
            <if condition="!origPcmList">
                <return error="true" message="Postal Address with ID [${contactMechId}] is not associated with party ID [${partyId}] and purpose [${contactMechPurposeId?:'N/A'}], not updating."/>
            </if>

            <!-- at this point we have at least one PCM, so create the updated PostalAddress and then expire/update the PCMs -->
            <entity-find-one entity-name="ContactMech" value-field="newContactMech"/>
            <set field="newContactMech.contactMechId" from="null"/>
            <entity-sequenced-id-primary value-field="newContactMech"/>
            <entity-create value-field="newContactMech"/>

            <set field="newPostalAddress.contactMechId" from="newContactMech.contactMechId"/>
            <entity-create value-field="newPostalAddress"/>

            <iterate list="origPcmList" entry="origPcm">
                <!-- expire origPcm, create new for new contactMechId -->
                <set field="origPcm.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="origPcm"/>

                <entity-make-value entity-name="PartyContactMech" value-field="newPcm"
                        map="[partyId:partyId, contactMechId:newContactMech.contactMechId, fromDate:ec.user.nowTimestamp]"/>
                <set field="newPcm.contactMechPurposeId" from="origPcm.contactMechPurposeId"/>
                <set field="newPcm.extension" from="origPcm.extension"/>
                <set field="newPcm.comments" from="origPcm.comments"/>
                <set field="newPcm.allowSolicitation" from="origPcm.allowSolicitation"/>
                <entity-create value-field="newPcm"/>
            </iterate>

            <set field="result.contactMechId" from="newContactMech.contactMechId"/>
        </actions>
    </service>

    <!-- TelecomNumber Services -->
    <service verb="create" noun="TelecomNumber" type="inline">
        <description>
            Create a Telecom Number (and the corresponding ContactMech record).
            If partyId and contactMechPurposeId are also passed will create a PartyContactMech record.
        </description>
        <in-parameters>
            <auto-parameters entity-name="TelecomNumber" include="nonpk"/>

            <parameter name="partyId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="ContactMech" value-field="contactMech" map="[contactMechTypeEnumId:'CmtTelecomNumber']"/>
            <entity-sequenced-id-primary value-field="contactMech"/>
            <entity-create value-field="contactMech"/>

            <entity-make-value entity-name="TelecomNumber" value-field="telecomNumber"/>
            <set field="telecomNumber.contactMechId" from="contactMech.contactMechId"/>
            <entity-set value-field="telecomNumber" include="nonpk"/>
            <entity-create value-field="telecomNumber"/>

            <if condition="partyId &amp;&amp; contactMechPurposeId">
                <entity-make-value entity-name="PartyContactMech" value-field="partyContactMech"
                    map="[partyId:partyId, contactMechId:contactMech.contactMechId, contactMechPurposeId:contactMechPurposeId, fromDate:ec.user.nowTimestamp]"/>
                <entity-create value-field="partyContactMech"/>
            </if>

            <set field="result.contactMechId" from="contactMech.contactMechId"/>
        </actions>
    </service>
    <service verb="update" noun="PartyTelecomNumber" type="inline">
        <description>
            Update a Telecom Number for a Party. TelecomNumber is immutable, so this creates a new one and associates
            it with the Party, expiring the old associations (PartyContactMech records).

            If a contactMechPurposeId is passed in it will only update for that purpose, otherwise it will update for
            all purposes.

            NOTE: if you want to update the ContactMech.paymentFraudEvidenceId or .trustLevelEnumId fields, do so
            directly on the ContactMech entity (do not use this service).
        </description>
        <in-parameters>
            <auto-parameters entity-name="TelecomNumber" include="nonpk"/>

            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="TelecomNumber" value-field="origTelecomNumber"/>
            <script>newTelecomNumber = origTelecomNumber.cloneValue()</script>
            <entity-set value-field="newTelecomNumber" include="nonpk"/>
            <if condition="newTelecomNumber == origTelecomNumber">
                <log level="info" message="No fields were different for Telecom Number with ID [${contactMechId}], not updating."/>
                <return error="false"/>
            </if>

            <entity-find entity-name="PartyContactMech" list="origPcmList">
                <date-filter/>
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechId" from="contactMechId"/>
                <econdition field-name="contactMechPurposeId" from="contactMechPurposeId" ignore-if-empty="true"/>
            </entity-find>
            <if condition="!origPcmList">
                <return error="true" message="Telecom Number with ID [${contactMechId}] is not associated with party ID [${partyId}] and purpose [${contactMechPurposeId?:'N/A'}], not updating."/>
            </if>

            <!-- at this point we have at least one PCM, so create the updated TelecomNumber and then expire/update the PCMs -->
            <entity-find-one entity-name="ContactMech" value-field="newContactMech"/>
            <set field="newContactMech.contactMechId" from="null"/>
            <entity-sequenced-id-primary value-field="newContactMech"/>
            <entity-create value-field="newContactMech"/>

            <set field="newTelecomNumber.contactMechId" from="newContactMech.contactMechId"/>
            <entity-create value-field="newTelecomNumber"/>

            <iterate list="origPcmList" entry="origPcm">
                <!-- expire origPcm, create new for new contactMechId -->
                <set field="origPcm.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="origPcm"/>

                <entity-make-value entity-name="PartyContactMech" value-field="newPcm"
                        map="[partyId:partyId, contactMechId:newContactMech.contactMechId, fromDate:ec.user.nowTimestamp]"/>
                <set field="newPcm.contactMechPurposeId" from="origPcm.contactMechPurposeId"/>
                <set field="newPcm.extension" from="origPcm.extension"/>
                <set field="newPcm.comments" from="origPcm.comments"/>
                <set field="newPcm.allowSolicitation" from="origPcm.allowSolicitation"/>
                <entity-create value-field="newPcm"/>
            </iterate>

            <set field="result.contactMechId" from="newContactMech.contactMechId"/>
        </actions>
    </service>

    <!-- Email Services -->
    <service verb="create" noun="EmailAddress">
        <in-parameters>
            <parameter name="emailAddress" required="true"><text-email/></parameter>

            <parameter name="partyId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-make-value entity-name="ContactMech" value-field="contactMech"
                map="[contactMechTypeEnumId:'CmtEmailAddress', infoString:emailAddress]"/>
            <entity-sequenced-id-primary value-field="contactMech"/>
            <entity-create value-field="contactMech"/>

            <if condition="partyId &amp;&amp; contactMechPurposeId">
                <entity-make-value entity-name="PartyContactMech" value-field="partyContactMech"
                    map="[partyId:partyId, contactMechId:contactMech.contactMechId, contactMechPurposeId:contactMechPurposeId, fromDate:ec.user.nowTimestamp]"/>
                <entity-create value-field="partyContactMech"/>
            </if>

            <set field="result.contactMechId" from="contactMech.contactMechId"/>
        </actions>
    </service>
    <service verb="get" noun="PrimaryEmailAddress">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emailAddress"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="PartyContactMechInfo" list="pcmiList">
                <date-filter/>
                <econdition-object field="[partyId:partyId, contactMechPurposeId:'EmailPrimary']"/>
            </entity-find>
            <if condition="pcmiList">
                <set field="emailAddress" from="pcmiList[0].infoString"/>

                <else>
                    <!-- get emailAddress from UserAccount -->
                    <entity-find entity-name="UserAccount" list="uaList">
                        <econdition-object field="[partyId:partyId]"/>
                    </entity-find>
                    <if condition="uaList">
                        <set field="emailAddress" from="uaList[0].emailAddress"/>
                    </if>
                </else>
            </if>
        </actions>
    </service>

    <!-- Other ContactMech Services -->
    <service verb="update" noun="PartyContactOther" type="inline">
        <description>
            Update 'Other' contact info (not PostalAddress or TelecomNumber) for a Party. ContactMech is immutable, so
            this creates a new one and associates it with the Party, expiring the old associations (PartyContactMech
            records).

            If a contactMechPurposeId is passed in it will only update for that purpose, otherwise it will update for
            all purposes.

            NOTE: if you want to update the ContactMech.paymentFraudEvidenceId or .trustLevelEnumId fields, do so
            directly on the ContactMech entity (do not use this service).
        </description>
        <in-parameters>
            <parameter name="infoString" required="true"/>

            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="ContactMech" value-field="origContactMech"/>
            <script>newContactMech = origContactMech.cloneValue()</script>
            <set field="newContactMech.infoString" from="infoString"/>
            <if condition="newContactMech == origContactMech">
                <return error="false" message="No fields were different for Postal Address with ID [${contactMechId}], not updating."/>
            </if>

            <entity-find entity-name="PartyContactMech" list="origPcmList">
                <date-filter/>
                <econdition field-name="partyId" from="partyId"/>
                <econdition field-name="contactMechId" from="contactMechId"/>
                <econdition field-name="contactMechPurposeId" from="contactMechPurposeId" ignore-if-empty="true"/>
            </entity-find>
            <if condition="!origPcmList">
                <return error="true" message="Email Address with ID [${contactMechId}] is not associated with party ID [${partyId}] and purpose [${contactMechPurposeId?:'N/A'}], not updating."/>
            </if>

            <!-- at this point we have at least one PCM, so create the updated ContactMech and then expire/update the PCMs -->
            <set field="newContactMech.contactMechId" from="null"/>
            <entity-sequenced-id-primary value-field="newContactMech"/>
            <entity-create value-field="newContactMech"/>

            <iterate list="origPcmList" entry="origPcm">
                <!-- expire origPcm, create new for new contactMechId -->
                <set field="origPcm.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="origPcm"/>

                <entity-make-value entity-name="PartyContactMech" value-field="newPcm"
                        map="[partyId:partyId, contactMechId:newContactMech.contactMechId, fromDate:ec.user.nowTimestamp]"/>
                <set field="newPcm.contactMechPurposeId" from="origPcm.contactMechPurposeId"/>
                <set field="newPcm.extension" from="origPcm.extension"/>
                <set field="newPcm.comments" from="origPcm.comments"/>
                <set field="newPcm.allowSolicitation" from="origPcm.allowSolicitation"/>
                <entity-create value-field="newPcm"/>
            </iterate>

            <set field="result.contactMechId" from="newContactMech.contactMechId"/>
        </actions>
    </service>

    <!-- General "Delete" Service -->
    <service verb="delete" noun="PartyContactMech">
        <in-parameters>
            <parameter name="partyId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <actions>
            <script><![CDATA[
                def ef = ec.entity.makeFind("PartyContactMech")
                ef.condition([partyId: partyId, contactMechId: contactMechId])
                if (contactMechPurposeId) ef.condition("contactMechPurposeId", contactMechPurposeId)
                ef.updateAll([thruDate: ec.user.getNowTimestamp()])
                ]]></script>
        </actions>
    </service>
</services>
