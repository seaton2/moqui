
Accounting - Ledger

* Low-level GL posting
** X mantle.ledger.LedgerServices.calculate#AcctgTransTrialBalance (calculateAcctgTransTrialBalance)
** X mantle.ledger.LedgerServices.post#AcctgTrans (postAcctgTrans)
** X get#InvoiceItemGlAccount, get#InvoiceBalanceGlAccount, will be others (no single service like OFBiz completeAcctgTransEntries, unless needed at some point for more general retry or something...)
** X mantle.ledger.LedgerServices.close#FinancialTimePeriod (closeFinancialTimePeriod)
* Journal Posting
** mantle.ledger.LedgerServices.calculate#GlJournalTrialBalance (calculateGlJournalTrialBalance)
** mantle.ledger.LedgerServices.post#GlJournal (postGlJournal)
* High-level Automated GL posting
** Invoice
*** X mantle.ledger.InvoiceAutoPostServices.post#Invoice (createAcctgTransForSalesInvoice, createAcctgTransForPurchaseInvoice, createAcctgTransForCustomerReturnInvoice)
*** mantle.ledger.InvoiceAutoPostServices.revert#InvoicePostOnCancel (revertAcctgTransOnCancelInvoice)
** Payment
*** X mantle.ledger.PaymentAutoPostServices.post#Payment (createAcctgTransAndEntriesForIncomingPayment, createAcctgTransAndEntriesForOutgoingPayment)
*** mantle.ledger.PaymentAutoPostServices.post#PaymentApplication (createAcctgTransAndEntriesForPaymentApplication)
*** mantle.ledger.PaymentAutoPostServices.post#CustomerRefundPaymentApplication (needed?) (createAcctgTransAndEntriesForCustomerRefundPaymentApplication)
*** mantle.ledger.PaymentAutoPostServices.revert#PaymentApplicationPostOnRemove (revertAcctgTransOnRemovePaymentApplications)
** Inventory
*** mantle.ledger.InventoryAutoPostServices.post#SalesShipmentAssetIssuance (createAcctgTransForSalesShipmentIssuance)
*** mantle.ledger.InventoryAutoPostServices.post#CanceledSalesShipmentAssetIssuance (createAcctgTransForCanceledSalesShipmentIssuance)
*** mantle.ledger.InventoryAutoPostServices.post#AssetCostChange (createAcctgTransForInventoryItemCostChange)
*** mantle.ledger.InventoryAutoPostServices.post#AssetOwnerChange (createAcctgTransForInventoryItemOwnerChange)
*** mantle.ledger.InventoryAutoPostServices.post#PhysicalInventoryVariance (createAcctgTransForPhysicalInventoryVariance)
*** mantle.ledger.InventoryAutoPostServices.post#ShipmentReceipt (createAcctgTransForShipmentReceipt)
*** mantle.ledger.InventoryAutoPostServices.post#WorkEffortAssetIssuance (createAcctgTransForWorkEffortIssuance*)
*** mantle.ledger.InventoryAutoPostServices.post#WorkEffortInventoryProduced (createAcctgTransForWorkEffortInventoryProduced*)
** Other
*** mantle.ledger.OtherAutoPostServices.post#WorkEffortCost (createAcctgTransForWorkEffortCost)
*** mantle.ledger.OtherAutoPostServices.post#AssetMaintIssuance (createAcctgTransForFixedAssetMaintIssuance)
*** mantle.ledger.OtherAutoPostServices.post#FinancialAccountTrans (postFinAccountTransToGl)
* Report view-entities and/or data prep
** Income Statement (P&L, prepareIncomeStatement)
** Balance Sheet
** Cash Flow Statement
** Retained Earnings Statement
** Trial Balance (calculateGlAccountTrialBalance)

Billing Account

* calcBillingAccountBalance

Invoice

* mantle.account.InvoiceServices.create#EntireOrderInvoice (createInvoiceFromOrder, createInvoiceForOrder (based on ItemIssuance records), createInvoiceForOrderAllItems)
* mantle.account.InvoiceServices.create#SalesShipmentInvoices (createInvoicesFromShipment)
* mantle.account.InvoiceServices.create#PurchaseShipmentInvoices (createInvoicesFromShipment)
* createInvoiceFromReturn
* mantle.account.InvoiceServices.create#SalesReturnShipmentInvoices (createInvoicesFromReturnShipment)
* createSalesInvoicesFromDropShipment
* mantle.account.InvoiceServices.create#TimeEntryInvoiceItems (addTimesheetToInvoice, addWorkEffortTimeToInvoice)
* mantle.account.InvoiceServices.create#ProjectInvoice

* capturePaymentsByInvoice

Payment

* Basic Payment
** mantle.account.PaymentServices.void#Payment (voidPayment)
** mantle.account.PaymentServices.autoApply#Payment, mantle.account.PaymentServices.autoApplyTo#Invoice (createMatchingPaymentApplication)
** X mantle.account.PaymentServices.apply#InvoicePayment, mantle.account.PaymentServices.apply#PaymentToPayment (createPaymentApplication?)
* Payment Processing
** mantle.account.PaymentServices.authorize#Payment (Interface) (ccAuthInterface, paymentProcessInterface, payPalProcessInterface, eftProcessInterface)
** mantle.account.PaymentServices.capture#Payment (Interface) (ccCaptureInterface)
** mantle.account.PaymentServices.release#Payment (Interface) (paymentReleaseInterface)
** mantle.account.PaymentServices.refund#Payment (Interface) (paymentRefundInterface)
** credit#Payment (Interface) really needed? (paymentCreditInterface, ccCreditInterface)
* Higher-level Payment Processing
** mantle.account.PaymentServices.authorize#OrderPayments (authOrderPayments)
** mantle.account.PaymentServices.capture#InvoicePayments (capturePaymentsByInvoice)
** captureOrderPayments (needed, commonly used? mostly goes through invoices...)
** releaseOrderPayments
** refundOrderPayment (refundPayment)
* Payment Processing Test Services
** mantle.account.PaymentTestServices.alwaysApprove#PaymentAuthorize (alwaysApproveCCProcessor)
** mantle.account.PaymentTestServices.alwaysDecline#PaymentAuthorization (alwaysDeclineCCProcessor)
** mantle.account.PaymentTestServices.alwaysFail#PaymentAuthorization (alwaysFailCCProcessor)
** mantle.account.PaymentTestServices.alwaysBadCardNumber#PaymentAuthorization (alwaysBadCardNumberCCProcessor)
** mantle.account.PaymentTestServices.alwaysBadExpire#PaymentAuthorization (alwaysBadExpireCCProcessor)
** mantle.account.PaymentTestServices.alwaysNsf#PaymentAuthorization (alwaysNsfCCProcessor)
** mantle.account.PaymentTestServices.alwaysApprove#PaymentCapture (testCCCapture, testCCCaptureWithReAuth)
** mantle.account.PaymentTestServices.alwaysDecline#PaymentCapture (testCCProcessorCaptureAlwaysDecline)
** mantle.account.PaymentTestServices.alwaysApprove#PaymentRelease (testCCRelease)
** mantle.account.PaymentTestServices.alwaysApprove#PaymentRefund (testCCRefund)

Financial Account

* Transactions
** mantle.account.FinancialAccountServices.depositTo#FinancialAccount (finAccountDeposit)
** mantle.account.FinancialAccountServices.withdrawFrom#FinancialAccount (finAccountWithdraw)
** refund#FinancialAccount needed? (finAccountRefund)
** createFinAccountTrans (does more than just CrUD stuff)
** updateFinAccountBalancesFromTrans
** updatePaymentOnFinAccTransStatusSetToCancel
* Authorization
** mantle.account.FinancialAccountServices.authorizeAgainst#FinancialAccount (createFinAccountAuth)
** mantle.account.FinancialAccountServices.expire#FinancialAccountAuth (expireFinAccountAuth)
** updateFinAccountBalancesFromAuth
* Payment Processing
** mantle.account.FinancialAccountServices.authorize#FinancialAccountPayment (ofbFaAuthorize)
** mantle.account.FinancialAccountServices.capture#FinancialAccountPayment (ofbFaCapture)
** mantle.account.FinancialAccountServices.release#FinancialAccountPayment (ofbFaRelease)
** mantle.account.FinancialAccountServices.refund#FinancialAccountPayment (ofbFaRefund)
* reconciliation? (reconcileFinAccountTrans, etc; autoFinAccountReconciliation, etc)
* gift certification services, or redundant? (ofbGcProcessor, etc; createGiftCertificate, etc)
* createPaymentAndFinAccountTrans?, expirePaymentAssociationsOnFinAccountTransCancel?
