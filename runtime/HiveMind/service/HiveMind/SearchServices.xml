<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">
    <service verb="indexAndNotify" noun="HiveMindDocuments" authenticate="anonymous-view">
        <implements service="org.moqui.EntityServices.receive#DataFeed"/>
        <actions>
            <script><![CDATA[
                import org.moqui.entity.EntityList
                import org.moqui.entity.EntityValue
                import org.slf4j.Logger
                import org.slf4j.LoggerFactory
                import org.moqui.context.ExecutionContext
                ExecutionContext ec = context.ec
                Logger logger = LoggerFactory.getLogger("index_DataDocuments")

                // call the indexing service
                Map indexResults = ec.service.sync().name("org.moqui.impl.EntityServices", "index", "DataDocuments")
                        .parameters((Map) context).parameter("getOriginalDocuments", true).call()

                // send email notifications
                List documentList = context.documentList
                List originalDocumentList = (List) indexResults.originalDocumentList

                for (int i = 0; i < documentList.size(); i++) {
                    Map document = (Map) documentList.get(i)
                    Map originalDocument = (Map) originalDocumentList.get(i)

                    if (!originalDocument || document != originalDocument) {
                        // send document updated notification

                        if (document._type == "HmWikiPage") {
                            // TODO: also check to see if fields shown in email are actually changed, otherwise don't send email

                            // send WikiPage updated notification
                            StringBuilder toAddresses = new StringBuilder()
                            EntityList wikiSpaceUserList = ec.entity.makeFind("HiveMind.wiki.WikiSpaceUser")
                                    .condition([wikiSpaceId:document.WikiPage.wikiSpaceId,  receiveNotifications:"Y"]).list()
                            if (wikiSpaceUserList) for (EntityValue wikiSpaceUser in wikiSpaceUserList) {
                                String emailAddress = ec.entity.makeFind("moqui.security.UserAccount")
                                        .condition("userId", wikiSpaceUser.userId).one()?.emailAddress
                                if (emailAddress) { if (toAddresses) toAddresses.append(",");  toAddresses.append(emailAddress) }
                            }
                            EntityList wikiPageUserList = ec.entity.makeFind("HiveMind.wiki.WikiPageUser")
                                    .condition([wikiPageId:document._id,  receiveNotifications:"Y"]).list()
                            if (wikiPageUserList) for (EntityValue wikiPageUser in wikiPageUserList) {
                                String emailAddress = ec.entity.makeFind("moqui.security.UserAccount")
                                        .condition("userId", wikiPageUser.userId).one()?.emailAddress
                                if (emailAddress) { if (toAddresses) toAddresses.append(",");  toAddresses.append(emailAddress) }
                            }

                            Map bodyParameters = [document: document, originalDocument: originalDocument]

                            if (toAddresses) {
                                ec.service.async().name("org.moqui.impl.EmailServices.send#EmailTemplate")
                                        .parameters([emailTemplateId: "HM_WIKI_PAGE_UPDATE",
                                        toAddresses: toAddresses.toString(), bodyParameters: bodyParameters])
                                        .call()
                            }
                        }

                        if (document._type == "HmTask") {
                            // TODO: also check to see if fields shown in email are actually changed, otherwise don't send email

                            // send task updated notification
                            StringBuilder toAddresses = new StringBuilder()
                            EntityList workEffortPartyList = ec.entity.makeFind("mantle.work.effort.WorkEffortParty")
                                    .condition([workEffortId:document._id,  receiveNotifications:"Y"])
                                    .conditionDate(null, null, null).list()
                            if (workEffortPartyList) for (EntityValue workEffortParty in workEffortPartyList) {
                                Map emailAddressMap = ec.service.sync().name("mantle.party.ContactServices.get#PrimaryEmailAddress")
                                        .parameter("partyId", workEffortParty.partyId).call()
                                if (emailAddressMap.emailAddress) {
                                    if (toAddresses) toAddresses.append(",")
                                    toAddresses.append(emailAddressMap.emailAddress)
                                }
                            }

                            Map bodyParameters = [document: document, originalDocument: originalDocument]

                            if (toAddresses) {
                                ec.service.async().name("org.moqui.impl.EmailServices.send#EmailTemplate")
                                        .parameters([emailTemplateId: "HM_TASK_UPDATE",
                                        toAddresses: toAddresses.toString(), bodyParameters: bodyParameters])
                                        .call()
                            }
                        }
                    }
                }
                ]]></script>
        </actions>
    </service>
</services>
