<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-1.3.xsd"
        default-menu-title="Search" default-menu-index="2">

    <transition name="submitSearch"><default-response url="."/></transition>

    <transition name="searchSuggest">
        <actions>
            <script>
                import org.elasticsearch.search.suggest.Suggest
                import org.elasticsearch.search.suggest.phrase.DirectCandidateGenerator
                import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder
                import org.elasticsearch.search.suggest.term.TermSuggestionBuilder

                org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("search_actions")

                org.moqui.context.ExecutionContext ec = context.ec
                String field = "name"
                // TODO: get this working - for whatever reason no suggestions come back in spite of trying dozens of combinations of parameters, maybe wait for next ES release...
                // see ES suggest docs at: http://www.elasticsearch.org/guide/reference/api/search/suggest/
                Suggest suggest = ec.elasticSearchClient.prepareSuggest("hivemind")
                        .addSuggestion(new PhraseSuggestionBuilder("phraseSb").analyzer("body").maxErrors(1.0F)
                            .addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator(field).suggestMode("always").minWordLength(3).sort("score").minDocFreq(0F).maxTermFreq(1.0F))
                            .gramSize(2).confidence(0.0F).size(1).field(field).text(term))
                        .execute().actionGet().getSuggest()
                //.addSuggestion(new TermSuggestionBuilder("termSb").size(20).minWordLength(3).suggestMode("always").sort("score").field("name").text(term))


                logger.warn("========= suggest term=${term}, size=${suggest.size()}")

                Iterator it = suggest.iterator()
                List optionList = []
                while (it.hasNext()) {
                    Suggest.Suggestion suggestion = it.next()
                    logger.warn("========= suggest term=${term}, suggestion name ${suggestion.getName()}, size=${suggestion.getEntries().size()}")

                    for (Suggest.Suggestion.Entry entry in suggestion.getEntries()) {
                        String entryText = entry.getText()
                        logger.warn("========== entryText [${entryText}] options size ${entry.getOptions().size()}")
                        for (Suggest.Suggestion.Entry.Option option in entry.getOptions()) {
                            logger.warn("========== entryText [${entryText}], optionText [${option.getText()}]")
                        }
                    }
                }

                def outList = []
                for (String option in optionList) outList.add([value: option, label: option])
                ec.web.sendJsonResponse(outList)
            </script>
        </actions>
        <default-response type="none"/>
    </transition>

    <actions>
        <if condition="queryString">
            <service-call name="org.moqui.impl.EntityServices.search#DataDocuments" out-map="context"
                    in-map="context + [indexName:'hivemind']"/>
        </if>
    </actions>
    <widgets>
        <form-single name="SearchOptions" transition="submitSearch">
            <field name="queryString"><default-field title="">
                <text-line size="40"/>
                <!-- <text-line ac-transition="searchSuggest" ac-min-length="3" size="40"/> -->
            </default-field></field>
            <field name="submitButton"><default-field title="Search"><submit/></default-field></field>
            <field-layout>
                <field-row><field-ref name="queryString"/><field-ref name="submitButton"/></field-row>
            </field-layout>
        </form-single>

        <form-list name="SearchResults" list="documentList" paginate="true" paginate-always-show="true">
            <row-actions>
                <entity-find-one entity-name="moqui.entity.document.DataDocument" value-field="dataDocument" cache="true">
                    <field-map field-name="dataDocumentId" from="_type"/>
                </entity-find-one>
                <!-- this is a type=many relationship, but we just want one here: -->
                <entity-find-related-one value-field="dataDocument" cache="true"
                        relationship-name="moqui.entity.document.DataDocumentLink" to-value-field="dataDocumentLink"/>
                <set field="linkUrl" from="ec.resource.evaluateStringExpand(dataDocumentLink?.linkUrl, '')"/>
                <set field="documentTitle" from="ec.resource.evaluateStringExpand(dataDocument?.documentTitle, '')"/>
            </row-actions>
            <field name="type"><default-field><display text="${dataDocument.documentName}"/></default-field></field>
            <field name="id"><default-field><display text="${_id}"/></default-field></field>
            <field name="documentTitle"><default-field title="Title"><display/></default-field></field>
            <field name="link"><default-field>
                <link url="${linkUrl}" text="${dataDocumentLink.label}" link-type="anchor" url-type="plain"/>
            </default-field></field>
        </form-list>
    </widgets>
</screen>
