<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:include schemaLocation="xml-actions-1.3.xsd"/>
    
    <xs:element name="secas">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="seca"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="seca">
        <xs:annotation><xs:documentation>
            Triggered by service calls with various options about when during the service call to trigger the event.
            If condition (optional) evaluates to true then the actions are run.

            Service ECAs are meant for triggering business processes and for extending the functionality of existing
            services that you don't want to, or can't, modify.
            Service ECAs should NOT generally be used for maintenance of data derived from other entities, Entity ECA
            rules are a much better tool for that.

            When this runs the context will be whatever context the service was run in, plus the individual parameters
            for convenience in reading the values.
            If when is before the service itself is run there will be a context variable called "parameters" with the
            parameters Map in it that you can modify as needed in the actions. If when is after the service itself
            the "parameters" variable will contain the parameters and a "results" parameter will contain the results
            that also may be modified.
        </xs:documentation></xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" ref="condition"/>
                <xs:element ref="actions"/>
            </xs:sequence>
            <xs:attribute name="service" type="xs:string" use="required">
                <xs:annotation><xs:documentation>
                    The combined service name, like: "${path}.${verb}${noun}". To explicitly separate the verb and noun
                    put a hash (#) between them, like: "${path}.${verb}#${noun}".
                </xs:documentation></xs:annotation>
            </xs:attribute>
            <xs:attribute name="when" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="pre-validate"/>
                        <xs:enumeration value="pre-auth"/>
                        <xs:enumeration value="pre-service"/>
                        <xs:enumeration value="post-service"/>
                        <xs:enumeration value="post-commit"/>
                        <xs:enumeration value="tx-commit">
                            <xs:annotation><xs:documentation>Runs when the transaction the service is running in is
                                successfully committed. Gets its context just before the run of the service and after
                                the pre-service ECA rules.</xs:documentation></xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="tx-rollback">
                            <xs:annotation><xs:documentation>Runs when the transaction the service is running in is
                                rolled back. Gets its context just before the run of the service and after
                                the pre-service ECA rules.</xs:documentation></xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="run-on-error" type="boolean" default="false"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
