<?xml version="1.0" encoding="UTF-8"?>
<!--
This Work is in the public domain and is provided on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
including, without limitation, any warranties or conditions of TITLE,
NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
You are solely responsible for determining the appropriateness of using
this Work and assume any risks associated with your use of this Work.

This Work includes contributions authored by David E. Jones, not as a
"work for hire", who hereby disclaims any copyright to the same.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.3.xsd">

    <service verb="create" noun="UserAccount" authenticate="anonymous-all" allow-remote="false">
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
            <parameter name="userFullName"/>
            <parameter name="emailAddress"/>
            <parameter name="currencyUomId"/>
            <parameter name="locale"/>
            <parameter name="timeZone"/>
        </in-parameters>
        <out-parameters>
            <parameter name="userId" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="create#UserAccount" out-map="createUaOut" in-map="context"/>
            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal"
                in-map="[userId:createUaOut.userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify]"/>
            <set field="result.userId" from="createUaOut.userId"/>
        </actions>
    </service>

    <service verb="increment" noun="UserAccountFailedLogins" authenticate="anonymous-all" allow-remote="false">
        <in-parameters><parameter name="userId" type="String" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
            <set field="userAccount.successiveFailedLogins"
                 from="userAccount.successiveFailedLogins ? userAccount.successiveFailedLogins + 1 : 1"/>
            <set field="maxFailures" from="(ec.ecfi.confXmlRoot.'user-facade'[0].login[0].'@max-failures' ?: 3) as Integer"/>
            <!-- if successiveFailedLogins is greater than max in conf then disable account -->
            <if condition="userAccount.successiveFailedLogins > maxFailures &amp;&amp; userAccount.disabled != 'Y'">
                <set field="userAccount.disabled" value="Y"/>
                <set field="userAccount.disabledDateTime" from="ec.user.nowTimestamp"/>
            </if>
            <log level="warn" message="================ Failed logins [${userAccount.successiveFailedLogins}], maxFailures [${maxFailures}], disabled [${userAccount.disabled}]"/>
            <entity-update value-field="userAccount"/>
        </actions>
    </service>

    <service verb="update" noun="Password" authenticate="anonymous-all" allow-remote="true">
        <description>Set a user's password. The userId must match the current user and the oldPassword must match the
            user's currentPassword or special permission is required.</description>
        <in-parameters>
            <parameter name="userId" required="false"><description>Defaults to the current userId in the ExecutionContext.</description></parameter>
            <parameter name="username" required="false"><description>May be used instead of userId to identify user.</description></parameter>
            <parameter name="oldPassword" required="true"><description>Ignored if user has password admin permissions.</description></parameter>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
        </in-parameters>
        <actions>
            <!-- TODO get perm from ? -->
            <set field="hasPwAdminPermission" from="false"/>

            <if condition="userId">
                <then>
                    <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/>
                </then>
                <else-if condition="username">
                    <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                        <field-map field-name="username"/>
                    </entity-find-one>
                </else-if>
            </if>
            <set field="userId" from="userAccount.userId"/>

            <!-- compare the passwords, encrypted -->
            <if condition="!hasPwAdminPermission">
                <if condition="ec.user.userId &amp;&amp; userId != ec.user.userId">
                    <return message="Cannot update the password of another user without password admin permission" error="true"/>
                </if>
                <if condition="!oldPassword">
                    <return message="Please enter current password" error="true"/>
                </if>

                <script>
                    def token = new org.apache.shiro.authc.UsernamePasswordToken((String) userAccount.username, (String) oldPassword)
                    def info = new org.apache.shiro.authc.SimpleAuthenticationInfo(username, userAccount.currentPassword,
                            userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null,
                            "moquiRealm")
                </script>
                <if condition="!ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType).doCredentialsMatch(token, info)">
                    <return message="Current password did not match" error="true" />
                </if>
            </if>

            <service-call name="org.moqui.impl.UserServices.update#PasswordInternal"
                in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify]"/>
        </actions>
    </service>
    <service verb="update" noun="PasswordInternal" authenticate="false" allow-remote="false">
        <in-parameters>
            <parameter name="userId" required="true"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>
        </in-parameters>
        <!-- TODO refactor update#Password to use this -->
        <actions>
            <!-- check a bunch of stuff about the new password -->
            <set field="passwordNode" from="ec.ecfi.confXmlRoot.'user-facade'[0].'password'[0]"/>

            <if condition="newPassword != newPasswordVerify">
                <message error="true">New Password and New Password Verify do not match</message>
            </if>

            <set field="minLength" from="passwordNode.'@min-length'" default-value="6" type="Integer"/>
            <if condition="newPassword.length() &lt; minLength">
                <message error="true">Password shorter than ${minLength} characters</message>
            </if>

            <set field="minDigits" from="passwordNode.'@min-digits'" default-value="1" type="Integer"/>
            <set field="digits" from="StupidUtilities.countChars(newPassword, true, false, false)"/>
            <if condition="digits &lt; minDigits">
                <message error="true">Password needs ${minDigits} digit/number characters</message>
            </if>

            <set field="minOthers" from="passwordNode.'@min-others'" default-value="1" type="Integer"/>
            <set field="others" from="StupidUtilities.countChars(newPassword, false, false, true)"/>
            <if condition="others &lt; minOthers">
                <message error="true">Password needs ${minOthers} other characters (not letter or digit)</message>
            </if>

            <!-- don't log this by default, security hole: <log level="info" message="newPassword=${newPassword}, length=${newPassword.length()}, digits=${digits}, others=${others}"/> -->

            <!-- if password is in the history don't allow it -->
            <set field="historyLimit" from="passwordNode.'@history-limit'" default-value="5" type="Integer"/>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="duplicateUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <!-- can't query by this field since it is encrypted: <econdition field-name="password" from="newPassword"/> -->
            </entity-find>
            <iterate list="duplicateUserPasswordHistoryList" entry="duplicateUserPasswordHistory">
                <if condition="duplicateUserPasswordHistory.password == newPassword">
                    <message error="true">Password was used in last ${historyLimit} passwords</message>
                </if>
            </iterate>

            <check-errors/>
            <!-- from here on the newPassword is considered okay -->

            <!-- save history, then while more in history than password.@history-limit default 5 then remove oldest -->
            <service-call name="create#moqui.security.UserPasswordHistory">
                <field-map field-name="userId"/>
                <field-map field-name="password" from="newPassword"/>
            </service-call>
            <entity-find entity-name="moqui.security.UserPasswordHistory" list="existingUserPasswordHistoryList">
                <econdition field-name="userId" from="userId"/>
                <order-by field-name="fromDate"/>
            </entity-find>
            <while condition="existingUserPasswordHistoryList.size() &gt; historyLimit">
                <entity-delete value-field="existingUserPasswordHistoryList.remove(0)"/>
            </while>

            <!-- encrypt password (using password.@encrypt-hash-type default SHA) and save -->
            <set field="salt" from="ec.ecfi.randomSalt"/>
            <service-call name="update#moqui.security.UserAccount">
                <field-map field-name="userId"/>
                <field-map field-name="currentPassword" from="ec.ecfi.getSimpleHash(newPassword, salt)"/>
                <field-map field-name="passwordSalt" from="salt"/>
                <field-map field-name="passwordHashType" from="ec.ecfi.passwordHashType"/>
                <field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/>
                <field-map field-name="requirePasswordChange" value="N"/>
                <field-map field-name="disabled" value="N"/>
            </service-call>
        </actions>
    </service>

    <service verb="reset" noun="Password" type="inline" authenticate="anonymous-all" allow-remote="true">
        <in-parameters>
            <parameter name="username" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount">
                <field-map field-name="username"/>
            </entity-find-one>
            <if condition="!userAccount">
                <return message="Could not find user account with username [${username}]" error="true"/>
            </if>
            <if condition="!userAccount.emailAddress">
                <return message="User account with username [${username}] does not have an email address" error="true"/>
            </if>

            <!-- reset the password to a random value -->
            <set field="newPassword" from="org.moqui.impl.StupidUtilities.getRandomString(12)"/>

            <set field="passwordNode" from="ec.ecfi.confXmlRoot.'user-facade'[0].'password'[0]"/>
            <set field="salt" from="ec.ecfi.randomSalt"/>
            <service-call name="update#moqui.security.UserAccount">
                <field-map field-name="userId" from="userAccount.userId"/>
                <field-map field-name="currentPassword" from="ec.ecfi.getSimpleHash(newPassword, salt)"/>
                <field-map field-name="passwordSalt" from="salt"/>
                <field-map field-name="passwordHashType" from="ec.ecfi.passwordHashType"/>
                <field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/>
                <field-map field-name="requirePasswordChange"
                           from="(passwordNode.'@email-require-change' == 'false') ? 'N' : 'Y'"/>
            </service-call>
            <script>userAccount.refresh()</script>

            <!-- send an email with the new password -->
            <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate">
                <field-map field-name="emailTemplateId" value="PASSWORD_RESET"/>
                <field-map field-name="toAddresses" from="userAccount.emailAddress"/>
                <field-map field-name="bodyParameters" from="[userAccount:userAccount, newPassword:newPassword]"/>
            </service-call>
            <message>Your password was reset and emailed to: ${userAccount.emailAddress}</message>
        </actions>
    </service>
</services>
